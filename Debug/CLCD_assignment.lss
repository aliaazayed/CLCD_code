
CLCD_assignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  000022d2  00002346  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001734  00000000  00000000  00002360  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d09  00000000  00000000  00003a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000479d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000048dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00004a4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00006696  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00007581  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008330  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00008490  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000871d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00008eeb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ed       	ldi	r30, 0xD2	; 210
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 f6 10 	call	0x21ec	; 0x21ec <main>
      7a:	0c 94 67 11 	jmp	0x22ce	; 0x22ce <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ad e6       	ldi	r26, 0x6D	; 109
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 4c 11 	jmp	0x2298	; 0x2298 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 3c 11 	jmp	0x2278	; 0x2278 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 58 11 	jmp	0x22b0	; 0x22b0 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 3c 11 	jmp	0x2278	; 0x2278 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 58 11 	jmp	0x22b0	; 0x22b0 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8d e6       	ldi	r24, 0x6D	; 109
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 4c 11 	jmp	0x2298	; 0x2298 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 3c 11 	jmp	0x2278	; 0x2278 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 58 11 	jmp	0x22b0	; 0x22b0 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 3c 11 	jmp	0x2278	; 0x2278 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 58 11 	jmp	0x22b0	; 0x22b0 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 3c 11 	jmp	0x2278	; 0x2278 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 58 11 	jmp	0x22b0	; 0x22b0 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 40 11 	jmp	0x2280	; 0x2280 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 5c 11 	jmp	0x22b8	; 0x22b8 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <CLCD_voidInitialization>:


#include <avr/delay.h>

void CLCD_voidInitialization(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	e8 97       	sbiw	r28, 0x38	; 56
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
	#if CLCD_MODE ==EIGHT_BIT_MODE
	MDIO_voidSetPortDirection( CLCD_DATA_PORT, DIO_PORT_OUTPUT);
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	6f ef       	ldi	r22, 0xFF	; 255
     b4e:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <MDIO_voidSetPortDirection>
	MDIO_voidSetPinDirection( CLCD_CONTROL_PORT, CLCD_RS_PIN,DIO_PIN_OUTPUT);
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	60 e0       	ldi	r22, 0x00	; 0
     b56:	41 e0       	ldi	r20, 0x01	; 1
     b58:	0e 94 0c 0b 	call	0x1618	; 0x1618 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection( CLCD_CONTROL_PORT, CLCD_RW_PIN,DIO_PIN_OUTPUT);
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	61 e0       	ldi	r22, 0x01	; 1
     b60:	41 e0       	ldi	r20, 0x01	; 1
     b62:	0e 94 0c 0b 	call	0x1618	; 0x1618 <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection( CLCD_CONTROL_PORT, CLCD_EN_PIN,DIO_PIN_OUTPUT);
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	62 e0       	ldi	r22, 0x02	; 2
     b6a:	41 e0       	ldi	r20, 0x01	; 1
     b6c:	0e 94 0c 0b 	call	0x1618	; 0x1618 <MDIO_voidSetPinDirection>
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	a8 e4       	ldi	r26, 0x48	; 72
     b76:	b2 e4       	ldi	r27, 0x42	; 66
     b78:	8d ab       	std	Y+53, r24	; 0x35
     b7a:	9e ab       	std	Y+54, r25	; 0x36
     b7c:	af ab       	std	Y+55, r26	; 0x37
     b7e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b80:	6d a9       	ldd	r22, Y+53	; 0x35
     b82:	7e a9       	ldd	r23, Y+54	; 0x36
     b84:	8f a9       	ldd	r24, Y+55	; 0x37
     b86:	98 ad       	ldd	r25, Y+56	; 0x38
     b88:	20 e0       	ldi	r18, 0x00	; 0
     b8a:	30 e0       	ldi	r19, 0x00	; 0
     b8c:	4a ef       	ldi	r20, 0xFA	; 250
     b8e:	54 e4       	ldi	r21, 0x44	; 68
     b90:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     b94:	dc 01       	movw	r26, r24
     b96:	cb 01       	movw	r24, r22
     b98:	89 ab       	std	Y+49, r24	; 0x31
     b9a:	9a ab       	std	Y+50, r25	; 0x32
     b9c:	ab ab       	std	Y+51, r26	; 0x33
     b9e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     ba0:	69 a9       	ldd	r22, Y+49	; 0x31
     ba2:	7a a9       	ldd	r23, Y+50	; 0x32
     ba4:	8b a9       	ldd	r24, Y+51	; 0x33
     ba6:	9c a9       	ldd	r25, Y+52	; 0x34
     ba8:	20 e0       	ldi	r18, 0x00	; 0
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	40 e8       	ldi	r20, 0x80	; 128
     bae:	5f e3       	ldi	r21, 0x3F	; 63
     bb0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     bb4:	88 23       	and	r24, r24
     bb6:	2c f4       	brge	.+10     	; 0xbc2 <CLCD_voidInitialization+0x8c>
		__ticks = 1;
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	98 ab       	std	Y+48, r25	; 0x30
     bbe:	8f a7       	std	Y+47, r24	; 0x2f
     bc0:	3f c0       	rjmp	.+126    	; 0xc40 <CLCD_voidInitialization+0x10a>
	else if (__tmp > 65535)
     bc2:	69 a9       	ldd	r22, Y+49	; 0x31
     bc4:	7a a9       	ldd	r23, Y+50	; 0x32
     bc6:	8b a9       	ldd	r24, Y+51	; 0x33
     bc8:	9c a9       	ldd	r25, Y+52	; 0x34
     bca:	20 e0       	ldi	r18, 0x00	; 0
     bcc:	3f ef       	ldi	r19, 0xFF	; 255
     bce:	4f e7       	ldi	r20, 0x7F	; 127
     bd0:	57 e4       	ldi	r21, 0x47	; 71
     bd2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     bd6:	18 16       	cp	r1, r24
     bd8:	4c f5       	brge	.+82     	; 0xc2c <CLCD_voidInitialization+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bda:	6d a9       	ldd	r22, Y+53	; 0x35
     bdc:	7e a9       	ldd	r23, Y+54	; 0x36
     bde:	8f a9       	ldd	r24, Y+55	; 0x37
     be0:	98 ad       	ldd	r25, Y+56	; 0x38
     be2:	20 e0       	ldi	r18, 0x00	; 0
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	40 e2       	ldi	r20, 0x20	; 32
     be8:	51 e4       	ldi	r21, 0x41	; 65
     bea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     bee:	dc 01       	movw	r26, r24
     bf0:	cb 01       	movw	r24, r22
     bf2:	bc 01       	movw	r22, r24
     bf4:	cd 01       	movw	r24, r26
     bf6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     bfa:	dc 01       	movw	r26, r24
     bfc:	cb 01       	movw	r24, r22
     bfe:	98 ab       	std	Y+48, r25	; 0x30
     c00:	8f a7       	std	Y+47, r24	; 0x2f
     c02:	0f c0       	rjmp	.+30     	; 0xc22 <CLCD_voidInitialization+0xec>
     c04:	88 ec       	ldi	r24, 0xC8	; 200
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	9e a7       	std	Y+46, r25	; 0x2e
     c0a:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c0c:	8d a5       	ldd	r24, Y+45	; 0x2d
     c0e:	9e a5       	ldd	r25, Y+46	; 0x2e
     c10:	01 97       	sbiw	r24, 0x01	; 1
     c12:	f1 f7       	brne	.-4      	; 0xc10 <CLCD_voidInitialization+0xda>
     c14:	9e a7       	std	Y+46, r25	; 0x2e
     c16:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c18:	8f a5       	ldd	r24, Y+47	; 0x2f
     c1a:	98 a9       	ldd	r25, Y+48	; 0x30
     c1c:	01 97       	sbiw	r24, 0x01	; 1
     c1e:	98 ab       	std	Y+48, r25	; 0x30
     c20:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c22:	8f a5       	ldd	r24, Y+47	; 0x2f
     c24:	98 a9       	ldd	r25, Y+48	; 0x30
     c26:	00 97       	sbiw	r24, 0x00	; 0
     c28:	69 f7       	brne	.-38     	; 0xc04 <CLCD_voidInitialization+0xce>
     c2a:	14 c0       	rjmp	.+40     	; 0xc54 <CLCD_voidInitialization+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c2c:	69 a9       	ldd	r22, Y+49	; 0x31
     c2e:	7a a9       	ldd	r23, Y+50	; 0x32
     c30:	8b a9       	ldd	r24, Y+51	; 0x33
     c32:	9c a9       	ldd	r25, Y+52	; 0x34
     c34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c38:	dc 01       	movw	r26, r24
     c3a:	cb 01       	movw	r24, r22
     c3c:	98 ab       	std	Y+48, r25	; 0x30
     c3e:	8f a7       	std	Y+47, r24	; 0x2f
     c40:	8f a5       	ldd	r24, Y+47	; 0x2f
     c42:	98 a9       	ldd	r25, Y+48	; 0x30
     c44:	9c a7       	std	Y+44, r25	; 0x2c
     c46:	8b a7       	std	Y+43, r24	; 0x2b
     c48:	8b a5       	ldd	r24, Y+43	; 0x2b
     c4a:	9c a5       	ldd	r25, Y+44	; 0x2c
     c4c:	01 97       	sbiw	r24, 0x01	; 1
     c4e:	f1 f7       	brne	.-4      	; 0xc4c <CLCD_voidInitialization+0x116>
     c50:	9c a7       	std	Y+44, r25	; 0x2c
     c52:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(50);
	CLCD_voidClearScreen();
     c54:	0e 94 c5 08 	call	0x118a	; 0x118a <CLCD_voidClearScreen>
	CLCD_voidSendCommand(CLCD_RETURN_HOME);
     c58:	82 e0       	ldi	r24, 0x02	; 2
     c5a:	0e 94 2f 08 	call	0x105e	; 0x105e <CLCD_voidSendCommand>
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	a8 e4       	ldi	r26, 0x48	; 72
     c64:	b2 e4       	ldi	r27, 0x42	; 66
     c66:	8f a3       	std	Y+39, r24	; 0x27
     c68:	98 a7       	std	Y+40, r25	; 0x28
     c6a:	a9 a7       	std	Y+41, r26	; 0x29
     c6c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c6e:	6f a1       	ldd	r22, Y+39	; 0x27
     c70:	78 a5       	ldd	r23, Y+40	; 0x28
     c72:	89 a5       	ldd	r24, Y+41	; 0x29
     c74:	9a a5       	ldd	r25, Y+42	; 0x2a
     c76:	20 e0       	ldi	r18, 0x00	; 0
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	4a ef       	ldi	r20, 0xFA	; 250
     c7c:	54 e4       	ldi	r21, 0x44	; 68
     c7e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c82:	dc 01       	movw	r26, r24
     c84:	cb 01       	movw	r24, r22
     c86:	8b a3       	std	Y+35, r24	; 0x23
     c88:	9c a3       	std	Y+36, r25	; 0x24
     c8a:	ad a3       	std	Y+37, r26	; 0x25
     c8c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     c8e:	6b a1       	ldd	r22, Y+35	; 0x23
     c90:	7c a1       	ldd	r23, Y+36	; 0x24
     c92:	8d a1       	ldd	r24, Y+37	; 0x25
     c94:	9e a1       	ldd	r25, Y+38	; 0x26
     c96:	20 e0       	ldi	r18, 0x00	; 0
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	40 e8       	ldi	r20, 0x80	; 128
     c9c:	5f e3       	ldi	r21, 0x3F	; 63
     c9e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     ca2:	88 23       	and	r24, r24
     ca4:	2c f4       	brge	.+10     	; 0xcb0 <CLCD_voidInitialization+0x17a>
		__ticks = 1;
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	9a a3       	std	Y+34, r25	; 0x22
     cac:	89 a3       	std	Y+33, r24	; 0x21
     cae:	3f c0       	rjmp	.+126    	; 0xd2e <CLCD_voidInitialization+0x1f8>
	else if (__tmp > 65535)
     cb0:	6b a1       	ldd	r22, Y+35	; 0x23
     cb2:	7c a1       	ldd	r23, Y+36	; 0x24
     cb4:	8d a1       	ldd	r24, Y+37	; 0x25
     cb6:	9e a1       	ldd	r25, Y+38	; 0x26
     cb8:	20 e0       	ldi	r18, 0x00	; 0
     cba:	3f ef       	ldi	r19, 0xFF	; 255
     cbc:	4f e7       	ldi	r20, 0x7F	; 127
     cbe:	57 e4       	ldi	r21, 0x47	; 71
     cc0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     cc4:	18 16       	cp	r1, r24
     cc6:	4c f5       	brge	.+82     	; 0xd1a <CLCD_voidInitialization+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cc8:	6f a1       	ldd	r22, Y+39	; 0x27
     cca:	78 a5       	ldd	r23, Y+40	; 0x28
     ccc:	89 a5       	ldd	r24, Y+41	; 0x29
     cce:	9a a5       	ldd	r25, Y+42	; 0x2a
     cd0:	20 e0       	ldi	r18, 0x00	; 0
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	40 e2       	ldi	r20, 0x20	; 32
     cd6:	51 e4       	ldi	r21, 0x41	; 65
     cd8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     cdc:	dc 01       	movw	r26, r24
     cde:	cb 01       	movw	r24, r22
     ce0:	bc 01       	movw	r22, r24
     ce2:	cd 01       	movw	r24, r26
     ce4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ce8:	dc 01       	movw	r26, r24
     cea:	cb 01       	movw	r24, r22
     cec:	9a a3       	std	Y+34, r25	; 0x22
     cee:	89 a3       	std	Y+33, r24	; 0x21
     cf0:	0f c0       	rjmp	.+30     	; 0xd10 <CLCD_voidInitialization+0x1da>
     cf2:	88 ec       	ldi	r24, 0xC8	; 200
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	98 a3       	std	Y+32, r25	; 0x20
     cf8:	8f 8f       	std	Y+31, r24	; 0x1f
     cfa:	8f 8d       	ldd	r24, Y+31	; 0x1f
     cfc:	98 a1       	ldd	r25, Y+32	; 0x20
     cfe:	01 97       	sbiw	r24, 0x01	; 1
     d00:	f1 f7       	brne	.-4      	; 0xcfe <CLCD_voidInitialization+0x1c8>
     d02:	98 a3       	std	Y+32, r25	; 0x20
     d04:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d06:	89 a1       	ldd	r24, Y+33	; 0x21
     d08:	9a a1       	ldd	r25, Y+34	; 0x22
     d0a:	01 97       	sbiw	r24, 0x01	; 1
     d0c:	9a a3       	std	Y+34, r25	; 0x22
     d0e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d10:	89 a1       	ldd	r24, Y+33	; 0x21
     d12:	9a a1       	ldd	r25, Y+34	; 0x22
     d14:	00 97       	sbiw	r24, 0x00	; 0
     d16:	69 f7       	brne	.-38     	; 0xcf2 <CLCD_voidInitialization+0x1bc>
     d18:	14 c0       	rjmp	.+40     	; 0xd42 <CLCD_voidInitialization+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d1a:	6b a1       	ldd	r22, Y+35	; 0x23
     d1c:	7c a1       	ldd	r23, Y+36	; 0x24
     d1e:	8d a1       	ldd	r24, Y+37	; 0x25
     d20:	9e a1       	ldd	r25, Y+38	; 0x26
     d22:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d26:	dc 01       	movw	r26, r24
     d28:	cb 01       	movw	r24, r22
     d2a:	9a a3       	std	Y+34, r25	; 0x22
     d2c:	89 a3       	std	Y+33, r24	; 0x21
     d2e:	89 a1       	ldd	r24, Y+33	; 0x21
     d30:	9a a1       	ldd	r25, Y+34	; 0x22
     d32:	9e 8f       	std	Y+30, r25	; 0x1e
     d34:	8d 8f       	std	Y+29, r24	; 0x1d
     d36:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d38:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d3a:	01 97       	sbiw	r24, 0x01	; 1
     d3c:	f1 f7       	brne	.-4      	; 0xd3a <CLCD_voidInitialization+0x204>
     d3e:	9e 8f       	std	Y+30, r25	; 0x1e
     d40:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(50);
	CLCD_voidSendCommand(FUNCTION_SET_TWO_LINE );
     d42:	88 e3       	ldi	r24, 0x38	; 56
     d44:	0e 94 2f 08 	call	0x105e	; 0x105e <CLCD_voidSendCommand>
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	a0 e8       	ldi	r26, 0x80	; 128
     d4e:	bf e3       	ldi	r27, 0x3F	; 63
     d50:	89 8f       	std	Y+25, r24	; 0x19
     d52:	9a 8f       	std	Y+26, r25	; 0x1a
     d54:	ab 8f       	std	Y+27, r26	; 0x1b
     d56:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d58:	69 8d       	ldd	r22, Y+25	; 0x19
     d5a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d60:	20 e0       	ldi	r18, 0x00	; 0
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	4a ef       	ldi	r20, 0xFA	; 250
     d66:	54 e4       	ldi	r21, 0x44	; 68
     d68:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d6c:	dc 01       	movw	r26, r24
     d6e:	cb 01       	movw	r24, r22
     d70:	8d 8b       	std	Y+21, r24	; 0x15
     d72:	9e 8b       	std	Y+22, r25	; 0x16
     d74:	af 8b       	std	Y+23, r26	; 0x17
     d76:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d78:	6d 89       	ldd	r22, Y+21	; 0x15
     d7a:	7e 89       	ldd	r23, Y+22	; 0x16
     d7c:	8f 89       	ldd	r24, Y+23	; 0x17
     d7e:	98 8d       	ldd	r25, Y+24	; 0x18
     d80:	20 e0       	ldi	r18, 0x00	; 0
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	40 e8       	ldi	r20, 0x80	; 128
     d86:	5f e3       	ldi	r21, 0x3F	; 63
     d88:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     d8c:	88 23       	and	r24, r24
     d8e:	2c f4       	brge	.+10     	; 0xd9a <CLCD_voidInitialization+0x264>
		__ticks = 1;
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	9c 8b       	std	Y+20, r25	; 0x14
     d96:	8b 8b       	std	Y+19, r24	; 0x13
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <CLCD_voidInitialization+0x2e2>
	else if (__tmp > 65535)
     d9a:	6d 89       	ldd	r22, Y+21	; 0x15
     d9c:	7e 89       	ldd	r23, Y+22	; 0x16
     d9e:	8f 89       	ldd	r24, Y+23	; 0x17
     da0:	98 8d       	ldd	r25, Y+24	; 0x18
     da2:	20 e0       	ldi	r18, 0x00	; 0
     da4:	3f ef       	ldi	r19, 0xFF	; 255
     da6:	4f e7       	ldi	r20, 0x7F	; 127
     da8:	57 e4       	ldi	r21, 0x47	; 71
     daa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     dae:	18 16       	cp	r1, r24
     db0:	4c f5       	brge	.+82     	; 0xe04 <CLCD_voidInitialization+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     db2:	69 8d       	ldd	r22, Y+25	; 0x19
     db4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     db6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     db8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	40 e2       	ldi	r20, 0x20	; 32
     dc0:	51 e4       	ldi	r21, 0x41	; 65
     dc2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     dc6:	dc 01       	movw	r26, r24
     dc8:	cb 01       	movw	r24, r22
     dca:	bc 01       	movw	r22, r24
     dcc:	cd 01       	movw	r24, r26
     dce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     dd2:	dc 01       	movw	r26, r24
     dd4:	cb 01       	movw	r24, r22
     dd6:	9c 8b       	std	Y+20, r25	; 0x14
     dd8:	8b 8b       	std	Y+19, r24	; 0x13
     dda:	0f c0       	rjmp	.+30     	; 0xdfa <CLCD_voidInitialization+0x2c4>
     ddc:	88 ec       	ldi	r24, 0xC8	; 200
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	9a 8b       	std	Y+18, r25	; 0x12
     de2:	89 8b       	std	Y+17, r24	; 0x11
     de4:	89 89       	ldd	r24, Y+17	; 0x11
     de6:	9a 89       	ldd	r25, Y+18	; 0x12
     de8:	01 97       	sbiw	r24, 0x01	; 1
     dea:	f1 f7       	brne	.-4      	; 0xde8 <CLCD_voidInitialization+0x2b2>
     dec:	9a 8b       	std	Y+18, r25	; 0x12
     dee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     df0:	8b 89       	ldd	r24, Y+19	; 0x13
     df2:	9c 89       	ldd	r25, Y+20	; 0x14
     df4:	01 97       	sbiw	r24, 0x01	; 1
     df6:	9c 8b       	std	Y+20, r25	; 0x14
     df8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dfa:	8b 89       	ldd	r24, Y+19	; 0x13
     dfc:	9c 89       	ldd	r25, Y+20	; 0x14
     dfe:	00 97       	sbiw	r24, 0x00	; 0
     e00:	69 f7       	brne	.-38     	; 0xddc <CLCD_voidInitialization+0x2a6>
     e02:	14 c0       	rjmp	.+40     	; 0xe2c <CLCD_voidInitialization+0x2f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e04:	6d 89       	ldd	r22, Y+21	; 0x15
     e06:	7e 89       	ldd	r23, Y+22	; 0x16
     e08:	8f 89       	ldd	r24, Y+23	; 0x17
     e0a:	98 8d       	ldd	r25, Y+24	; 0x18
     e0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e10:	dc 01       	movw	r26, r24
     e12:	cb 01       	movw	r24, r22
     e14:	9c 8b       	std	Y+20, r25	; 0x14
     e16:	8b 8b       	std	Y+19, r24	; 0x13
     e18:	8b 89       	ldd	r24, Y+19	; 0x13
     e1a:	9c 89       	ldd	r25, Y+20	; 0x14
     e1c:	98 8b       	std	Y+16, r25	; 0x10
     e1e:	8f 87       	std	Y+15, r24	; 0x0f
     e20:	8f 85       	ldd	r24, Y+15	; 0x0f
     e22:	98 89       	ldd	r25, Y+16	; 0x10
     e24:	01 97       	sbiw	r24, 0x01	; 1
     e26:	f1 f7       	brne	.-4      	; 0xe24 <CLCD_voidInitialization+0x2ee>
     e28:	98 8b       	std	Y+16, r25	; 0x10
     e2a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	CLCD_voidSendCommand(LCD_DISPLAY_ON_CURSOR_OFF_BLINK_OFF  );
     e2c:	8c e0       	ldi	r24, 0x0C	; 12
     e2e:	0e 94 2f 08 	call	0x105e	; 0x105e <CLCD_voidSendCommand>
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	a0 e8       	ldi	r26, 0x80	; 128
     e38:	bf e3       	ldi	r27, 0x3F	; 63
     e3a:	8b 87       	std	Y+11, r24	; 0x0b
     e3c:	9c 87       	std	Y+12, r25	; 0x0c
     e3e:	ad 87       	std	Y+13, r26	; 0x0d
     e40:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e42:	6b 85       	ldd	r22, Y+11	; 0x0b
     e44:	7c 85       	ldd	r23, Y+12	; 0x0c
     e46:	8d 85       	ldd	r24, Y+13	; 0x0d
     e48:	9e 85       	ldd	r25, Y+14	; 0x0e
     e4a:	20 e0       	ldi	r18, 0x00	; 0
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	4a ef       	ldi	r20, 0xFA	; 250
     e50:	54 e4       	ldi	r21, 0x44	; 68
     e52:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e56:	dc 01       	movw	r26, r24
     e58:	cb 01       	movw	r24, r22
     e5a:	8f 83       	std	Y+7, r24	; 0x07
     e5c:	98 87       	std	Y+8, r25	; 0x08
     e5e:	a9 87       	std	Y+9, r26	; 0x09
     e60:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e62:	6f 81       	ldd	r22, Y+7	; 0x07
     e64:	78 85       	ldd	r23, Y+8	; 0x08
     e66:	89 85       	ldd	r24, Y+9	; 0x09
     e68:	9a 85       	ldd	r25, Y+10	; 0x0a
     e6a:	20 e0       	ldi	r18, 0x00	; 0
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	40 e8       	ldi	r20, 0x80	; 128
     e70:	5f e3       	ldi	r21, 0x3F	; 63
     e72:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     e76:	88 23       	and	r24, r24
     e78:	2c f4       	brge	.+10     	; 0xe84 <CLCD_voidInitialization+0x34e>
		__ticks = 1;
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	9e 83       	std	Y+6, r25	; 0x06
     e80:	8d 83       	std	Y+5, r24	; 0x05
     e82:	3f c0       	rjmp	.+126    	; 0xf02 <CLCD_voidInitialization+0x3cc>
	else if (__tmp > 65535)
     e84:	6f 81       	ldd	r22, Y+7	; 0x07
     e86:	78 85       	ldd	r23, Y+8	; 0x08
     e88:	89 85       	ldd	r24, Y+9	; 0x09
     e8a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e8c:	20 e0       	ldi	r18, 0x00	; 0
     e8e:	3f ef       	ldi	r19, 0xFF	; 255
     e90:	4f e7       	ldi	r20, 0x7F	; 127
     e92:	57 e4       	ldi	r21, 0x47	; 71
     e94:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     e98:	18 16       	cp	r1, r24
     e9a:	4c f5       	brge	.+82     	; 0xeee <CLCD_voidInitialization+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e9c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e9e:	7c 85       	ldd	r23, Y+12	; 0x0c
     ea0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ea2:	9e 85       	ldd	r25, Y+14	; 0x0e
     ea4:	20 e0       	ldi	r18, 0x00	; 0
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	40 e2       	ldi	r20, 0x20	; 32
     eaa:	51 e4       	ldi	r21, 0x41	; 65
     eac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     eb0:	dc 01       	movw	r26, r24
     eb2:	cb 01       	movw	r24, r22
     eb4:	bc 01       	movw	r22, r24
     eb6:	cd 01       	movw	r24, r26
     eb8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ebc:	dc 01       	movw	r26, r24
     ebe:	cb 01       	movw	r24, r22
     ec0:	9e 83       	std	Y+6, r25	; 0x06
     ec2:	8d 83       	std	Y+5, r24	; 0x05
     ec4:	0f c0       	rjmp	.+30     	; 0xee4 <CLCD_voidInitialization+0x3ae>
     ec6:	88 ec       	ldi	r24, 0xC8	; 200
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	9c 83       	std	Y+4, r25	; 0x04
     ecc:	8b 83       	std	Y+3, r24	; 0x03
     ece:	8b 81       	ldd	r24, Y+3	; 0x03
     ed0:	9c 81       	ldd	r25, Y+4	; 0x04
     ed2:	01 97       	sbiw	r24, 0x01	; 1
     ed4:	f1 f7       	brne	.-4      	; 0xed2 <CLCD_voidInitialization+0x39c>
     ed6:	9c 83       	std	Y+4, r25	; 0x04
     ed8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eda:	8d 81       	ldd	r24, Y+5	; 0x05
     edc:	9e 81       	ldd	r25, Y+6	; 0x06
     ede:	01 97       	sbiw	r24, 0x01	; 1
     ee0:	9e 83       	std	Y+6, r25	; 0x06
     ee2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ee4:	8d 81       	ldd	r24, Y+5	; 0x05
     ee6:	9e 81       	ldd	r25, Y+6	; 0x06
     ee8:	00 97       	sbiw	r24, 0x00	; 0
     eea:	69 f7       	brne	.-38     	; 0xec6 <CLCD_voidInitialization+0x390>
     eec:	14 c0       	rjmp	.+40     	; 0xf16 <CLCD_voidInitialization+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eee:	6f 81       	ldd	r22, Y+7	; 0x07
     ef0:	78 85       	ldd	r23, Y+8	; 0x08
     ef2:	89 85       	ldd	r24, Y+9	; 0x09
     ef4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ef6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     efa:	dc 01       	movw	r26, r24
     efc:	cb 01       	movw	r24, r22
     efe:	9e 83       	std	Y+6, r25	; 0x06
     f00:	8d 83       	std	Y+5, r24	; 0x05
     f02:	8d 81       	ldd	r24, Y+5	; 0x05
     f04:	9e 81       	ldd	r25, Y+6	; 0x06
     f06:	9a 83       	std	Y+2, r25	; 0x02
     f08:	89 83       	std	Y+1, r24	; 0x01
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	9a 81       	ldd	r25, Y+2	; 0x02
     f0e:	01 97       	sbiw	r24, 0x01	; 1
     f10:	f1 f7       	brne	.-4      	; 0xf0e <CLCD_voidInitialization+0x3d8>
     f12:	9a 83       	std	Y+2, r25	; 0x02
     f14:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	CLCD_voidClearScreen();
     f16:	0e 94 c5 08 	call	0x118a	; 0x118a <CLCD_voidClearScreen>
	CLCD_voidSendCommand(LCD_ENTRY_MODE_SHIFT_LEFT );
     f1a:	86 e0       	ldi	r24, 0x06	; 6
     f1c:	0e 94 2f 08 	call	0x105e	; 0x105e <CLCD_voidSendCommand>
	_delay_ms(1);
	CLCD_voidClearScreen();
	CLCD_voidSendCommand(LCD_ENTRY_MODE_SHIFT_LEFT );
	#endif
	
}
     f20:	e8 96       	adiw	r28, 0x38	; 56
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	f8 94       	cli
     f26:	de bf       	out	0x3e, r29	; 62
     f28:	0f be       	out	0x3f, r0	; 63
     f2a:	cd bf       	out	0x3d, r28	; 61
     f2c:	cf 91       	pop	r28
     f2e:	df 91       	pop	r29
     f30:	08 95       	ret

00000f32 <CLCD_voidSendData>:
	
 void CLCD_voidSendData( u8 copy_u8Data)
 {
     f32:	df 93       	push	r29
     f34:	cf 93       	push	r28
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
     f3a:	2f 97       	sbiw	r28, 0x0f	; 15
     f3c:	0f b6       	in	r0, 0x3f	; 63
     f3e:	f8 94       	cli
     f40:	de bf       	out	0x3e, r29	; 62
     f42:	0f be       	out	0x3f, r0	; 63
     f44:	cd bf       	out	0x3d, r28	; 61
     f46:	8f 87       	std	Y+15, r24	; 0x0f
	 #if CLCD_MODE == EIGHT_BIT_MODE
	 MDIO_voidSetPortValue(CLCD_DATA_PORT, copy_u8Data);
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	6f 85       	ldd	r22, Y+15	; 0x0f
     f4c:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <MDIO_voidSetPortValue>
	 MDIO_voidSetPinValue(CLCD_CONTROL_PORT,CLCD_RS_PIN,DIO_PIN_HIGH);
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	60 e0       	ldi	r22, 0x00	; 0
     f54:	41 e0       	ldi	r20, 0x01	; 1
     f56:	0e 94 14 0c 	call	0x1828	; 0x1828 <MDIO_voidSetPinValue>
	 MDIO_voidSetPinValue(CLCD_CONTROL_PORT,CLCD_RW_PIN,DIO_PIN_LOW);
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	61 e0       	ldi	r22, 0x01	; 1
     f5e:	40 e0       	ldi	r20, 0x00	; 0
     f60:	0e 94 14 0c 	call	0x1828	; 0x1828 <MDIO_voidSetPinValue>
	 CLCD_voidSendFallingEdge ();
     f64:	0e 94 0b 0a 	call	0x1416	; 0x1416 <CLCD_voidSendFallingEdge>
     f68:	80 e0       	ldi	r24, 0x00	; 0
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	a0 e8       	ldi	r26, 0x80	; 128
     f6e:	bf e3       	ldi	r27, 0x3F	; 63
     f70:	8b 87       	std	Y+11, r24	; 0x0b
     f72:	9c 87       	std	Y+12, r25	; 0x0c
     f74:	ad 87       	std	Y+13, r26	; 0x0d
     f76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f78:	6b 85       	ldd	r22, Y+11	; 0x0b
     f7a:	7c 85       	ldd	r23, Y+12	; 0x0c
     f7c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f7e:	9e 85       	ldd	r25, Y+14	; 0x0e
     f80:	20 e0       	ldi	r18, 0x00	; 0
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	4a ef       	ldi	r20, 0xFA	; 250
     f86:	54 e4       	ldi	r21, 0x44	; 68
     f88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f8c:	dc 01       	movw	r26, r24
     f8e:	cb 01       	movw	r24, r22
     f90:	8f 83       	std	Y+7, r24	; 0x07
     f92:	98 87       	std	Y+8, r25	; 0x08
     f94:	a9 87       	std	Y+9, r26	; 0x09
     f96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f98:	6f 81       	ldd	r22, Y+7	; 0x07
     f9a:	78 85       	ldd	r23, Y+8	; 0x08
     f9c:	89 85       	ldd	r24, Y+9	; 0x09
     f9e:	9a 85       	ldd	r25, Y+10	; 0x0a
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	40 e8       	ldi	r20, 0x80	; 128
     fa6:	5f e3       	ldi	r21, 0x3F	; 63
     fa8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     fac:	88 23       	and	r24, r24
     fae:	2c f4       	brge	.+10     	; 0xfba <CLCD_voidSendData+0x88>
		__ticks = 1;
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	9e 83       	std	Y+6, r25	; 0x06
     fb6:	8d 83       	std	Y+5, r24	; 0x05
     fb8:	3f c0       	rjmp	.+126    	; 0x1038 <CLCD_voidSendData+0x106>
	else if (__tmp > 65535)
     fba:	6f 81       	ldd	r22, Y+7	; 0x07
     fbc:	78 85       	ldd	r23, Y+8	; 0x08
     fbe:	89 85       	ldd	r24, Y+9	; 0x09
     fc0:	9a 85       	ldd	r25, Y+10	; 0x0a
     fc2:	20 e0       	ldi	r18, 0x00	; 0
     fc4:	3f ef       	ldi	r19, 0xFF	; 255
     fc6:	4f e7       	ldi	r20, 0x7F	; 127
     fc8:	57 e4       	ldi	r21, 0x47	; 71
     fca:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     fce:	18 16       	cp	r1, r24
     fd0:	4c f5       	brge	.+82     	; 0x1024 <CLCD_voidSendData+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fd2:	6b 85       	ldd	r22, Y+11	; 0x0b
     fd4:	7c 85       	ldd	r23, Y+12	; 0x0c
     fd6:	8d 85       	ldd	r24, Y+13	; 0x0d
     fd8:	9e 85       	ldd	r25, Y+14	; 0x0e
     fda:	20 e0       	ldi	r18, 0x00	; 0
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	40 e2       	ldi	r20, 0x20	; 32
     fe0:	51 e4       	ldi	r21, 0x41	; 65
     fe2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fe6:	dc 01       	movw	r26, r24
     fe8:	cb 01       	movw	r24, r22
     fea:	bc 01       	movw	r22, r24
     fec:	cd 01       	movw	r24, r26
     fee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ff2:	dc 01       	movw	r26, r24
     ff4:	cb 01       	movw	r24, r22
     ff6:	9e 83       	std	Y+6, r25	; 0x06
     ff8:	8d 83       	std	Y+5, r24	; 0x05
     ffa:	0f c0       	rjmp	.+30     	; 0x101a <CLCD_voidSendData+0xe8>
     ffc:	88 ec       	ldi	r24, 0xC8	; 200
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	9c 83       	std	Y+4, r25	; 0x04
    1002:	8b 83       	std	Y+3, r24	; 0x03
    1004:	8b 81       	ldd	r24, Y+3	; 0x03
    1006:	9c 81       	ldd	r25, Y+4	; 0x04
    1008:	01 97       	sbiw	r24, 0x01	; 1
    100a:	f1 f7       	brne	.-4      	; 0x1008 <CLCD_voidSendData+0xd6>
    100c:	9c 83       	std	Y+4, r25	; 0x04
    100e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1010:	8d 81       	ldd	r24, Y+5	; 0x05
    1012:	9e 81       	ldd	r25, Y+6	; 0x06
    1014:	01 97       	sbiw	r24, 0x01	; 1
    1016:	9e 83       	std	Y+6, r25	; 0x06
    1018:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    101a:	8d 81       	ldd	r24, Y+5	; 0x05
    101c:	9e 81       	ldd	r25, Y+6	; 0x06
    101e:	00 97       	sbiw	r24, 0x00	; 0
    1020:	69 f7       	brne	.-38     	; 0xffc <CLCD_voidSendData+0xca>
    1022:	14 c0       	rjmp	.+40     	; 0x104c <CLCD_voidSendData+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1024:	6f 81       	ldd	r22, Y+7	; 0x07
    1026:	78 85       	ldd	r23, Y+8	; 0x08
    1028:	89 85       	ldd	r24, Y+9	; 0x09
    102a:	9a 85       	ldd	r25, Y+10	; 0x0a
    102c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1030:	dc 01       	movw	r26, r24
    1032:	cb 01       	movw	r24, r22
    1034:	9e 83       	std	Y+6, r25	; 0x06
    1036:	8d 83       	std	Y+5, r24	; 0x05
    1038:	8d 81       	ldd	r24, Y+5	; 0x05
    103a:	9e 81       	ldd	r25, Y+6	; 0x06
    103c:	9a 83       	std	Y+2, r25	; 0x02
    103e:	89 83       	std	Y+1, r24	; 0x01
    1040:	89 81       	ldd	r24, Y+1	; 0x01
    1042:	9a 81       	ldd	r25, Y+2	; 0x02
    1044:	01 97       	sbiw	r24, 0x01	; 1
    1046:	f1 f7       	brne	.-4      	; 0x1044 <CLCD_voidSendData+0x112>
    1048:	9a 83       	std	Y+2, r25	; 0x02
    104a:	89 83       	std	Y+1, r24	; 0x01
	#endif

	_delay_ms(1);
	  
	  
 }
    104c:	2f 96       	adiw	r28, 0x0f	; 15
    104e:	0f b6       	in	r0, 0x3f	; 63
    1050:	f8 94       	cli
    1052:	de bf       	out	0x3e, r29	; 62
    1054:	0f be       	out	0x3f, r0	; 63
    1056:	cd bf       	out	0x3d, r28	; 61
    1058:	cf 91       	pop	r28
    105a:	df 91       	pop	r29
    105c:	08 95       	ret

0000105e <CLCD_voidSendCommand>:
	 
void CLCD_voidSendCommand( u8 copy_u8Command)
{
    105e:	df 93       	push	r29
    1060:	cf 93       	push	r28
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
    1066:	2f 97       	sbiw	r28, 0x0f	; 15
    1068:	0f b6       	in	r0, 0x3f	; 63
    106a:	f8 94       	cli
    106c:	de bf       	out	0x3e, r29	; 62
    106e:	0f be       	out	0x3f, r0	; 63
    1070:	cd bf       	out	0x3d, r28	; 61
    1072:	8f 87       	std	Y+15, r24	; 0x0f
	 #if CLCD_MODE == EIGHT_BIT_MODE
	 MDIO_voidSetPortValue(CLCD_DATA_PORT,copy_u8Command);
    1074:	80 e0       	ldi	r24, 0x00	; 0
    1076:	6f 85       	ldd	r22, Y+15	; 0x0f
    1078:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <MDIO_voidSetPortValue>
	 MDIO_voidSetPinValue(CLCD_CONTROL_PORT,CLCD_RS_PIN,DIO_PIN_LOW);
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	60 e0       	ldi	r22, 0x00	; 0
    1080:	40 e0       	ldi	r20, 0x00	; 0
    1082:	0e 94 14 0c 	call	0x1828	; 0x1828 <MDIO_voidSetPinValue>
	 MDIO_voidSetPinValue(CLCD_CONTROL_PORT,CLCD_RW_PIN,DIO_PIN_LOW);
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	61 e0       	ldi	r22, 0x01	; 1
    108a:	40 e0       	ldi	r20, 0x00	; 0
    108c:	0e 94 14 0c 	call	0x1828	; 0x1828 <MDIO_voidSetPinValue>
	 CLCD_voidSendFallingEdge ();
    1090:	0e 94 0b 0a 	call	0x1416	; 0x1416 <CLCD_voidSendFallingEdge>
    1094:	80 e0       	ldi	r24, 0x00	; 0
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	a0 e8       	ldi	r26, 0x80	; 128
    109a:	bf e3       	ldi	r27, 0x3F	; 63
    109c:	8b 87       	std	Y+11, r24	; 0x0b
    109e:	9c 87       	std	Y+12, r25	; 0x0c
    10a0:	ad 87       	std	Y+13, r26	; 0x0d
    10a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    10a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    10a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ac:	20 e0       	ldi	r18, 0x00	; 0
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	4a ef       	ldi	r20, 0xFA	; 250
    10b2:	54 e4       	ldi	r21, 0x44	; 68
    10b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10b8:	dc 01       	movw	r26, r24
    10ba:	cb 01       	movw	r24, r22
    10bc:	8f 83       	std	Y+7, r24	; 0x07
    10be:	98 87       	std	Y+8, r25	; 0x08
    10c0:	a9 87       	std	Y+9, r26	; 0x09
    10c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10c4:	6f 81       	ldd	r22, Y+7	; 0x07
    10c6:	78 85       	ldd	r23, Y+8	; 0x08
    10c8:	89 85       	ldd	r24, Y+9	; 0x09
    10ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    10cc:	20 e0       	ldi	r18, 0x00	; 0
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	40 e8       	ldi	r20, 0x80	; 128
    10d2:	5f e3       	ldi	r21, 0x3F	; 63
    10d4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    10d8:	88 23       	and	r24, r24
    10da:	2c f4       	brge	.+10     	; 0x10e6 <CLCD_voidSendCommand+0x88>
		__ticks = 1;
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	9e 83       	std	Y+6, r25	; 0x06
    10e2:	8d 83       	std	Y+5, r24	; 0x05
    10e4:	3f c0       	rjmp	.+126    	; 0x1164 <CLCD_voidSendCommand+0x106>
	else if (__tmp > 65535)
    10e6:	6f 81       	ldd	r22, Y+7	; 0x07
    10e8:	78 85       	ldd	r23, Y+8	; 0x08
    10ea:	89 85       	ldd	r24, Y+9	; 0x09
    10ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ee:	20 e0       	ldi	r18, 0x00	; 0
    10f0:	3f ef       	ldi	r19, 0xFF	; 255
    10f2:	4f e7       	ldi	r20, 0x7F	; 127
    10f4:	57 e4       	ldi	r21, 0x47	; 71
    10f6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    10fa:	18 16       	cp	r1, r24
    10fc:	4c f5       	brge	.+82     	; 0x1150 <CLCD_voidSendCommand+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1100:	7c 85       	ldd	r23, Y+12	; 0x0c
    1102:	8d 85       	ldd	r24, Y+13	; 0x0d
    1104:	9e 85       	ldd	r25, Y+14	; 0x0e
    1106:	20 e0       	ldi	r18, 0x00	; 0
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	40 e2       	ldi	r20, 0x20	; 32
    110c:	51 e4       	ldi	r21, 0x41	; 65
    110e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1112:	dc 01       	movw	r26, r24
    1114:	cb 01       	movw	r24, r22
    1116:	bc 01       	movw	r22, r24
    1118:	cd 01       	movw	r24, r26
    111a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    111e:	dc 01       	movw	r26, r24
    1120:	cb 01       	movw	r24, r22
    1122:	9e 83       	std	Y+6, r25	; 0x06
    1124:	8d 83       	std	Y+5, r24	; 0x05
    1126:	0f c0       	rjmp	.+30     	; 0x1146 <CLCD_voidSendCommand+0xe8>
    1128:	88 ec       	ldi	r24, 0xC8	; 200
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	9c 83       	std	Y+4, r25	; 0x04
    112e:	8b 83       	std	Y+3, r24	; 0x03
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	9c 81       	ldd	r25, Y+4	; 0x04
    1134:	01 97       	sbiw	r24, 0x01	; 1
    1136:	f1 f7       	brne	.-4      	; 0x1134 <CLCD_voidSendCommand+0xd6>
    1138:	9c 83       	std	Y+4, r25	; 0x04
    113a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    113c:	8d 81       	ldd	r24, Y+5	; 0x05
    113e:	9e 81       	ldd	r25, Y+6	; 0x06
    1140:	01 97       	sbiw	r24, 0x01	; 1
    1142:	9e 83       	std	Y+6, r25	; 0x06
    1144:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1146:	8d 81       	ldd	r24, Y+5	; 0x05
    1148:	9e 81       	ldd	r25, Y+6	; 0x06
    114a:	00 97       	sbiw	r24, 0x00	; 0
    114c:	69 f7       	brne	.-38     	; 0x1128 <CLCD_voidSendCommand+0xca>
    114e:	14 c0       	rjmp	.+40     	; 0x1178 <CLCD_voidSendCommand+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1150:	6f 81       	ldd	r22, Y+7	; 0x07
    1152:	78 85       	ldd	r23, Y+8	; 0x08
    1154:	89 85       	ldd	r24, Y+9	; 0x09
    1156:	9a 85       	ldd	r25, Y+10	; 0x0a
    1158:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    115c:	dc 01       	movw	r26, r24
    115e:	cb 01       	movw	r24, r22
    1160:	9e 83       	std	Y+6, r25	; 0x06
    1162:	8d 83       	std	Y+5, r24	; 0x05
    1164:	8d 81       	ldd	r24, Y+5	; 0x05
    1166:	9e 81       	ldd	r25, Y+6	; 0x06
    1168:	9a 83       	std	Y+2, r25	; 0x02
    116a:	89 83       	std	Y+1, r24	; 0x01
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	9a 81       	ldd	r25, Y+2	; 0x02
    1170:	01 97       	sbiw	r24, 0x01	; 1
    1172:	f1 f7       	brne	.-4      	; 0x1170 <CLCD_voidSendCommand+0x112>
    1174:	9a 83       	std	Y+2, r25	; 0x02
    1176:	89 83       	std	Y+1, r24	; 0x01

	#endif

	_delay_ms(1);
	 
}
    1178:	2f 96       	adiw	r28, 0x0f	; 15
    117a:	0f b6       	in	r0, 0x3f	; 63
    117c:	f8 94       	cli
    117e:	de bf       	out	0x3e, r29	; 62
    1180:	0f be       	out	0x3f, r0	; 63
    1182:	cd bf       	out	0x3d, r28	; 61
    1184:	cf 91       	pop	r28
    1186:	df 91       	pop	r29
    1188:	08 95       	ret

0000118a <CLCD_voidClearScreen>:
void CLCD_voidClearScreen(void)
{
    118a:	df 93       	push	r29
    118c:	cf 93       	push	r28
    118e:	cd b7       	in	r28, 0x3d	; 61
    1190:	de b7       	in	r29, 0x3e	; 62
    1192:	2e 97       	sbiw	r28, 0x0e	; 14
    1194:	0f b6       	in	r0, 0x3f	; 63
    1196:	f8 94       	cli
    1198:	de bf       	out	0x3e, r29	; 62
    119a:	0f be       	out	0x3f, r0	; 63
    119c:	cd bf       	out	0x3d, r28	; 61
	CLCD_voidSendCommand( LCD_DISPLAY_CLEAR);
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	0e 94 2f 08 	call	0x105e	; 0x105e <CLCD_voidSendCommand>
    11a4:	80 e0       	ldi	r24, 0x00	; 0
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	a0 e2       	ldi	r26, 0x20	; 32
    11aa:	b1 e4       	ldi	r27, 0x41	; 65
    11ac:	8b 87       	std	Y+11, r24	; 0x0b
    11ae:	9c 87       	std	Y+12, r25	; 0x0c
    11b0:	ad 87       	std	Y+13, r26	; 0x0d
    11b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    11b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    11b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    11ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	4a ef       	ldi	r20, 0xFA	; 250
    11c2:	54 e4       	ldi	r21, 0x44	; 68
    11c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11c8:	dc 01       	movw	r26, r24
    11ca:	cb 01       	movw	r24, r22
    11cc:	8f 83       	std	Y+7, r24	; 0x07
    11ce:	98 87       	std	Y+8, r25	; 0x08
    11d0:	a9 87       	std	Y+9, r26	; 0x09
    11d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11d4:	6f 81       	ldd	r22, Y+7	; 0x07
    11d6:	78 85       	ldd	r23, Y+8	; 0x08
    11d8:	89 85       	ldd	r24, Y+9	; 0x09
    11da:	9a 85       	ldd	r25, Y+10	; 0x0a
    11dc:	20 e0       	ldi	r18, 0x00	; 0
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	40 e8       	ldi	r20, 0x80	; 128
    11e2:	5f e3       	ldi	r21, 0x3F	; 63
    11e4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    11e8:	88 23       	and	r24, r24
    11ea:	2c f4       	brge	.+10     	; 0x11f6 <CLCD_voidClearScreen+0x6c>
		__ticks = 1;
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	9e 83       	std	Y+6, r25	; 0x06
    11f2:	8d 83       	std	Y+5, r24	; 0x05
    11f4:	3f c0       	rjmp	.+126    	; 0x1274 <CLCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    11f6:	6f 81       	ldd	r22, Y+7	; 0x07
    11f8:	78 85       	ldd	r23, Y+8	; 0x08
    11fa:	89 85       	ldd	r24, Y+9	; 0x09
    11fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	3f ef       	ldi	r19, 0xFF	; 255
    1202:	4f e7       	ldi	r20, 0x7F	; 127
    1204:	57 e4       	ldi	r21, 0x47	; 71
    1206:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    120a:	18 16       	cp	r1, r24
    120c:	4c f5       	brge	.+82     	; 0x1260 <CLCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    120e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1210:	7c 85       	ldd	r23, Y+12	; 0x0c
    1212:	8d 85       	ldd	r24, Y+13	; 0x0d
    1214:	9e 85       	ldd	r25, Y+14	; 0x0e
    1216:	20 e0       	ldi	r18, 0x00	; 0
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	40 e2       	ldi	r20, 0x20	; 32
    121c:	51 e4       	ldi	r21, 0x41	; 65
    121e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1222:	dc 01       	movw	r26, r24
    1224:	cb 01       	movw	r24, r22
    1226:	bc 01       	movw	r22, r24
    1228:	cd 01       	movw	r24, r26
    122a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    122e:	dc 01       	movw	r26, r24
    1230:	cb 01       	movw	r24, r22
    1232:	9e 83       	std	Y+6, r25	; 0x06
    1234:	8d 83       	std	Y+5, r24	; 0x05
    1236:	0f c0       	rjmp	.+30     	; 0x1256 <CLCD_voidClearScreen+0xcc>
    1238:	88 ec       	ldi	r24, 0xC8	; 200
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	9c 83       	std	Y+4, r25	; 0x04
    123e:	8b 83       	std	Y+3, r24	; 0x03
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	9c 81       	ldd	r25, Y+4	; 0x04
    1244:	01 97       	sbiw	r24, 0x01	; 1
    1246:	f1 f7       	brne	.-4      	; 0x1244 <CLCD_voidClearScreen+0xba>
    1248:	9c 83       	std	Y+4, r25	; 0x04
    124a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    124c:	8d 81       	ldd	r24, Y+5	; 0x05
    124e:	9e 81       	ldd	r25, Y+6	; 0x06
    1250:	01 97       	sbiw	r24, 0x01	; 1
    1252:	9e 83       	std	Y+6, r25	; 0x06
    1254:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1256:	8d 81       	ldd	r24, Y+5	; 0x05
    1258:	9e 81       	ldd	r25, Y+6	; 0x06
    125a:	00 97       	sbiw	r24, 0x00	; 0
    125c:	69 f7       	brne	.-38     	; 0x1238 <CLCD_voidClearScreen+0xae>
    125e:	14 c0       	rjmp	.+40     	; 0x1288 <CLCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1260:	6f 81       	ldd	r22, Y+7	; 0x07
    1262:	78 85       	ldd	r23, Y+8	; 0x08
    1264:	89 85       	ldd	r24, Y+9	; 0x09
    1266:	9a 85       	ldd	r25, Y+10	; 0x0a
    1268:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    126c:	dc 01       	movw	r26, r24
    126e:	cb 01       	movw	r24, r22
    1270:	9e 83       	std	Y+6, r25	; 0x06
    1272:	8d 83       	std	Y+5, r24	; 0x05
    1274:	8d 81       	ldd	r24, Y+5	; 0x05
    1276:	9e 81       	ldd	r25, Y+6	; 0x06
    1278:	9a 83       	std	Y+2, r25	; 0x02
    127a:	89 83       	std	Y+1, r24	; 0x01
    127c:	89 81       	ldd	r24, Y+1	; 0x01
    127e:	9a 81       	ldd	r25, Y+2	; 0x02
    1280:	01 97       	sbiw	r24, 0x01	; 1
    1282:	f1 f7       	brne	.-4      	; 0x1280 <CLCD_voidClearScreen+0xf6>
    1284:	9a 83       	std	Y+2, r25	; 0x02
    1286:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    1288:	2e 96       	adiw	r28, 0x0e	; 14
    128a:	0f b6       	in	r0, 0x3f	; 63
    128c:	f8 94       	cli
    128e:	de bf       	out	0x3e, r29	; 62
    1290:	0f be       	out	0x3f, r0	; 63
    1292:	cd bf       	out	0x3d, r28	; 61
    1294:	cf 91       	pop	r28
    1296:	df 91       	pop	r29
    1298:	08 95       	ret

0000129a <CLCD_voidSendString>:
 void CLCD_voidSendString( u8* copy_u8ptrString)
 {
    129a:	df 93       	push	r29
    129c:	cf 93       	push	r28
    129e:	00 d0       	rcall	.+0      	; 0x12a0 <CLCD_voidSendString+0x6>
    12a0:	0f 92       	push	r0
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
    12a6:	9b 83       	std	Y+3, r25	; 0x03
    12a8:	8a 83       	std	Y+2, r24	; 0x02
	 u8 LOC_u8Itrator=0;
    12aa:	19 82       	std	Y+1, r1	; 0x01
	 while(copy_u8ptrString[ LOC_u8Itrator] != '/0')
	 {
		CLCD_voidSendData(copy_u8ptrString[ LOC_u8Itrator]);
    12ac:	89 81       	ldd	r24, Y+1	; 0x01
    12ae:	28 2f       	mov	r18, r24
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	8a 81       	ldd	r24, Y+2	; 0x02
    12b4:	9b 81       	ldd	r25, Y+3	; 0x03
    12b6:	fc 01       	movw	r30, r24
    12b8:	e2 0f       	add	r30, r18
    12ba:	f3 1f       	adc	r31, r19
    12bc:	80 81       	ld	r24, Z
    12be:	0e 94 99 07 	call	0xf32	; 0xf32 <CLCD_voidSendData>
		 LOC_u8Itrator++;
    12c2:	89 81       	ldd	r24, Y+1	; 0x01
    12c4:	8f 5f       	subi	r24, 0xFF	; 255
    12c6:	89 83       	std	Y+1, r24	; 0x01
    12c8:	f1 cf       	rjmp	.-30     	; 0x12ac <CLCD_voidSendString+0x12>

000012ca <CLCD_voidSetPosition>:
	 }
 }	 

 void CLCD_voidSetPosition ( u8 copy_u8Row, u8 copy_u8Column)
 {
    12ca:	df 93       	push	r29
    12cc:	cf 93       	push	r28
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
    12d2:	61 97       	sbiw	r28, 0x11	; 17
    12d4:	0f b6       	in	r0, 0x3f	; 63
    12d6:	f8 94       	cli
    12d8:	de bf       	out	0x3e, r29	; 62
    12da:	0f be       	out	0x3f, r0	; 63
    12dc:	cd bf       	out	0x3d, r28	; 61
    12de:	88 8b       	std	Y+16, r24	; 0x10
    12e0:	69 8b       	std	Y+17, r22	; 0x11
	 u8 LOC_u8Data;
	 if( (copy_u8Row>2)||(copy_u8Row<1) ||(copy_u8Column>16)||(copy_u8Column<1))
    12e2:	88 89       	ldd	r24, Y+16	; 0x10
    12e4:	83 30       	cpi	r24, 0x03	; 3
    12e6:	48 f4       	brcc	.+18     	; 0x12fa <CLCD_voidSetPosition+0x30>
    12e8:	88 89       	ldd	r24, Y+16	; 0x10
    12ea:	88 23       	and	r24, r24
    12ec:	31 f0       	breq	.+12     	; 0x12fa <CLCD_voidSetPosition+0x30>
    12ee:	89 89       	ldd	r24, Y+17	; 0x11
    12f0:	81 31       	cpi	r24, 0x11	; 17
    12f2:	18 f4       	brcc	.+6      	; 0x12fa <CLCD_voidSetPosition+0x30>
    12f4:	89 89       	ldd	r24, Y+17	; 0x11
    12f6:	88 23       	and	r24, r24
    12f8:	19 f4       	brne	.+6      	; 0x1300 <CLCD_voidSetPosition+0x36>
	 {
		 LOC_u8Data=LCD_SET_CURSOR_FIRST_LINE;
    12fa:	80 e8       	ldi	r24, 0x80	; 128
    12fc:	8f 87       	std	Y+15, r24	; 0x0f
    12fe:	0d c0       	rjmp	.+26     	; 0x131a <CLCD_voidSetPosition+0x50>
	 }
	 else if(copy_u8Row==CLCD_ROW_1)
    1300:	88 89       	ldd	r24, Y+16	; 0x10
    1302:	81 30       	cpi	r24, 0x01	; 1
    1304:	21 f4       	brne	.+8      	; 0x130e <CLCD_voidSetPosition+0x44>
	 {
		 LOC_u8Data=LCD_SET_CURSOR_FIRST_LINE+(copy_u8Column-1);
    1306:	89 89       	ldd	r24, Y+17	; 0x11
    1308:	81 58       	subi	r24, 0x81	; 129
    130a:	8f 87       	std	Y+15, r24	; 0x0f
    130c:	06 c0       	rjmp	.+12     	; 0x131a <CLCD_voidSetPosition+0x50>
	 }
     else if(copy_u8Row==CLCD_ROW_2)
    130e:	88 89       	ldd	r24, Y+16	; 0x10
    1310:	82 30       	cpi	r24, 0x02	; 2
    1312:	19 f4       	brne	.+6      	; 0x131a <CLCD_voidSetPosition+0x50>
	 {
		 LOC_u8Data=LCD_SET_CURSOR_SECOND_LINE +(copy_u8Column-1);
    1314:	89 89       	ldd	r24, Y+17	; 0x11
    1316:	81 54       	subi	r24, 0x41	; 65
    1318:	8f 87       	std	Y+15, r24	; 0x0f
	 }	
    CLCD_voidSendCommand(LOC_u8Data);
    131a:	8f 85       	ldd	r24, Y+15	; 0x0f
    131c:	0e 94 2f 08 	call	0x105e	; 0x105e <CLCD_voidSendCommand>
    1320:	80 e0       	ldi	r24, 0x00	; 0
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	a0 e8       	ldi	r26, 0x80	; 128
    1326:	bf e3       	ldi	r27, 0x3F	; 63
    1328:	8b 87       	std	Y+11, r24	; 0x0b
    132a:	9c 87       	std	Y+12, r25	; 0x0c
    132c:	ad 87       	std	Y+13, r26	; 0x0d
    132e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1330:	6b 85       	ldd	r22, Y+11	; 0x0b
    1332:	7c 85       	ldd	r23, Y+12	; 0x0c
    1334:	8d 85       	ldd	r24, Y+13	; 0x0d
    1336:	9e 85       	ldd	r25, Y+14	; 0x0e
    1338:	20 e0       	ldi	r18, 0x00	; 0
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	4a ef       	ldi	r20, 0xFA	; 250
    133e:	54 e4       	ldi	r21, 0x44	; 68
    1340:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1344:	dc 01       	movw	r26, r24
    1346:	cb 01       	movw	r24, r22
    1348:	8f 83       	std	Y+7, r24	; 0x07
    134a:	98 87       	std	Y+8, r25	; 0x08
    134c:	a9 87       	std	Y+9, r26	; 0x09
    134e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1350:	6f 81       	ldd	r22, Y+7	; 0x07
    1352:	78 85       	ldd	r23, Y+8	; 0x08
    1354:	89 85       	ldd	r24, Y+9	; 0x09
    1356:	9a 85       	ldd	r25, Y+10	; 0x0a
    1358:	20 e0       	ldi	r18, 0x00	; 0
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	40 e8       	ldi	r20, 0x80	; 128
    135e:	5f e3       	ldi	r21, 0x3F	; 63
    1360:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1364:	88 23       	and	r24, r24
    1366:	2c f4       	brge	.+10     	; 0x1372 <CLCD_voidSetPosition+0xa8>
		__ticks = 1;
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	9e 83       	std	Y+6, r25	; 0x06
    136e:	8d 83       	std	Y+5, r24	; 0x05
    1370:	3f c0       	rjmp	.+126    	; 0x13f0 <CLCD_voidSetPosition+0x126>
	else if (__tmp > 65535)
    1372:	6f 81       	ldd	r22, Y+7	; 0x07
    1374:	78 85       	ldd	r23, Y+8	; 0x08
    1376:	89 85       	ldd	r24, Y+9	; 0x09
    1378:	9a 85       	ldd	r25, Y+10	; 0x0a
    137a:	20 e0       	ldi	r18, 0x00	; 0
    137c:	3f ef       	ldi	r19, 0xFF	; 255
    137e:	4f e7       	ldi	r20, 0x7F	; 127
    1380:	57 e4       	ldi	r21, 0x47	; 71
    1382:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1386:	18 16       	cp	r1, r24
    1388:	4c f5       	brge	.+82     	; 0x13dc <CLCD_voidSetPosition+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    138a:	6b 85       	ldd	r22, Y+11	; 0x0b
    138c:	7c 85       	ldd	r23, Y+12	; 0x0c
    138e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1390:	9e 85       	ldd	r25, Y+14	; 0x0e
    1392:	20 e0       	ldi	r18, 0x00	; 0
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	40 e2       	ldi	r20, 0x20	; 32
    1398:	51 e4       	ldi	r21, 0x41	; 65
    139a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    139e:	dc 01       	movw	r26, r24
    13a0:	cb 01       	movw	r24, r22
    13a2:	bc 01       	movw	r22, r24
    13a4:	cd 01       	movw	r24, r26
    13a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13aa:	dc 01       	movw	r26, r24
    13ac:	cb 01       	movw	r24, r22
    13ae:	9e 83       	std	Y+6, r25	; 0x06
    13b0:	8d 83       	std	Y+5, r24	; 0x05
    13b2:	0f c0       	rjmp	.+30     	; 0x13d2 <CLCD_voidSetPosition+0x108>
    13b4:	88 ec       	ldi	r24, 0xC8	; 200
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	9c 83       	std	Y+4, r25	; 0x04
    13ba:	8b 83       	std	Y+3, r24	; 0x03
    13bc:	8b 81       	ldd	r24, Y+3	; 0x03
    13be:	9c 81       	ldd	r25, Y+4	; 0x04
    13c0:	01 97       	sbiw	r24, 0x01	; 1
    13c2:	f1 f7       	brne	.-4      	; 0x13c0 <CLCD_voidSetPosition+0xf6>
    13c4:	9c 83       	std	Y+4, r25	; 0x04
    13c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13c8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ca:	9e 81       	ldd	r25, Y+6	; 0x06
    13cc:	01 97       	sbiw	r24, 0x01	; 1
    13ce:	9e 83       	std	Y+6, r25	; 0x06
    13d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13d2:	8d 81       	ldd	r24, Y+5	; 0x05
    13d4:	9e 81       	ldd	r25, Y+6	; 0x06
    13d6:	00 97       	sbiw	r24, 0x00	; 0
    13d8:	69 f7       	brne	.-38     	; 0x13b4 <CLCD_voidSetPosition+0xea>
    13da:	14 c0       	rjmp	.+40     	; 0x1404 <CLCD_voidSetPosition+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13dc:	6f 81       	ldd	r22, Y+7	; 0x07
    13de:	78 85       	ldd	r23, Y+8	; 0x08
    13e0:	89 85       	ldd	r24, Y+9	; 0x09
    13e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    13e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13e8:	dc 01       	movw	r26, r24
    13ea:	cb 01       	movw	r24, r22
    13ec:	9e 83       	std	Y+6, r25	; 0x06
    13ee:	8d 83       	std	Y+5, r24	; 0x05
    13f0:	8d 81       	ldd	r24, Y+5	; 0x05
    13f2:	9e 81       	ldd	r25, Y+6	; 0x06
    13f4:	9a 83       	std	Y+2, r25	; 0x02
    13f6:	89 83       	std	Y+1, r24	; 0x01
    13f8:	89 81       	ldd	r24, Y+1	; 0x01
    13fa:	9a 81       	ldd	r25, Y+2	; 0x02
    13fc:	01 97       	sbiw	r24, 0x01	; 1
    13fe:	f1 f7       	brne	.-4      	; 0x13fc <CLCD_voidSetPosition+0x132>
    1400:	9a 83       	std	Y+2, r25	; 0x02
    1402:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
 }	
    1404:	61 96       	adiw	r28, 0x11	; 17
    1406:	0f b6       	in	r0, 0x3f	; 63
    1408:	f8 94       	cli
    140a:	de bf       	out	0x3e, r29	; 62
    140c:	0f be       	out	0x3f, r0	; 63
    140e:	cd bf       	out	0x3d, r28	; 61
    1410:	cf 91       	pop	r28
    1412:	df 91       	pop	r29
    1414:	08 95       	ret

00001416 <CLCD_voidSendFallingEdge>:




 void CLCD_voidSendFallingEdge (void)
 {
    1416:	df 93       	push	r29
    1418:	cf 93       	push	r28
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
    141e:	6c 97       	sbiw	r28, 0x1c	; 28
    1420:	0f b6       	in	r0, 0x3f	; 63
    1422:	f8 94       	cli
    1424:	de bf       	out	0x3e, r29	; 62
    1426:	0f be       	out	0x3f, r0	; 63
    1428:	cd bf       	out	0x3d, r28	; 61
	MDIO_voidSetPinValue(CLCD_CONTROL_PORT, CLCD_EN_PIN, DIO_PIN_HIGH);
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	62 e0       	ldi	r22, 0x02	; 2
    142e:	41 e0       	ldi	r20, 0x01	; 1
    1430:	0e 94 14 0c 	call	0x1828	; 0x1828 <MDIO_voidSetPinValue>
    1434:	80 e0       	ldi	r24, 0x00	; 0
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	a0 e8       	ldi	r26, 0x80	; 128
    143a:	bf e3       	ldi	r27, 0x3F	; 63
    143c:	89 8f       	std	Y+25, r24	; 0x19
    143e:	9a 8f       	std	Y+26, r25	; 0x1a
    1440:	ab 8f       	std	Y+27, r26	; 0x1b
    1442:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1444:	69 8d       	ldd	r22, Y+25	; 0x19
    1446:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1448:	8b 8d       	ldd	r24, Y+27	; 0x1b
    144a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    144c:	20 e0       	ldi	r18, 0x00	; 0
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	4a ef       	ldi	r20, 0xFA	; 250
    1452:	54 e4       	ldi	r21, 0x44	; 68
    1454:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1458:	dc 01       	movw	r26, r24
    145a:	cb 01       	movw	r24, r22
    145c:	8d 8b       	std	Y+21, r24	; 0x15
    145e:	9e 8b       	std	Y+22, r25	; 0x16
    1460:	af 8b       	std	Y+23, r26	; 0x17
    1462:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1464:	6d 89       	ldd	r22, Y+21	; 0x15
    1466:	7e 89       	ldd	r23, Y+22	; 0x16
    1468:	8f 89       	ldd	r24, Y+23	; 0x17
    146a:	98 8d       	ldd	r25, Y+24	; 0x18
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	40 e8       	ldi	r20, 0x80	; 128
    1472:	5f e3       	ldi	r21, 0x3F	; 63
    1474:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1478:	88 23       	and	r24, r24
    147a:	2c f4       	brge	.+10     	; 0x1486 <CLCD_voidSendFallingEdge+0x70>
		__ticks = 1;
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	9c 8b       	std	Y+20, r25	; 0x14
    1482:	8b 8b       	std	Y+19, r24	; 0x13
    1484:	3f c0       	rjmp	.+126    	; 0x1504 <CLCD_voidSendFallingEdge+0xee>
	else if (__tmp > 65535)
    1486:	6d 89       	ldd	r22, Y+21	; 0x15
    1488:	7e 89       	ldd	r23, Y+22	; 0x16
    148a:	8f 89       	ldd	r24, Y+23	; 0x17
    148c:	98 8d       	ldd	r25, Y+24	; 0x18
    148e:	20 e0       	ldi	r18, 0x00	; 0
    1490:	3f ef       	ldi	r19, 0xFF	; 255
    1492:	4f e7       	ldi	r20, 0x7F	; 127
    1494:	57 e4       	ldi	r21, 0x47	; 71
    1496:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    149a:	18 16       	cp	r1, r24
    149c:	4c f5       	brge	.+82     	; 0x14f0 <CLCD_voidSendFallingEdge+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    149e:	69 8d       	ldd	r22, Y+25	; 0x19
    14a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14a6:	20 e0       	ldi	r18, 0x00	; 0
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	40 e2       	ldi	r20, 0x20	; 32
    14ac:	51 e4       	ldi	r21, 0x41	; 65
    14ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14b2:	dc 01       	movw	r26, r24
    14b4:	cb 01       	movw	r24, r22
    14b6:	bc 01       	movw	r22, r24
    14b8:	cd 01       	movw	r24, r26
    14ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14be:	dc 01       	movw	r26, r24
    14c0:	cb 01       	movw	r24, r22
    14c2:	9c 8b       	std	Y+20, r25	; 0x14
    14c4:	8b 8b       	std	Y+19, r24	; 0x13
    14c6:	0f c0       	rjmp	.+30     	; 0x14e6 <CLCD_voidSendFallingEdge+0xd0>
    14c8:	88 ec       	ldi	r24, 0xC8	; 200
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	9a 8b       	std	Y+18, r25	; 0x12
    14ce:	89 8b       	std	Y+17, r24	; 0x11
    14d0:	89 89       	ldd	r24, Y+17	; 0x11
    14d2:	9a 89       	ldd	r25, Y+18	; 0x12
    14d4:	01 97       	sbiw	r24, 0x01	; 1
    14d6:	f1 f7       	brne	.-4      	; 0x14d4 <CLCD_voidSendFallingEdge+0xbe>
    14d8:	9a 8b       	std	Y+18, r25	; 0x12
    14da:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14dc:	8b 89       	ldd	r24, Y+19	; 0x13
    14de:	9c 89       	ldd	r25, Y+20	; 0x14
    14e0:	01 97       	sbiw	r24, 0x01	; 1
    14e2:	9c 8b       	std	Y+20, r25	; 0x14
    14e4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14e6:	8b 89       	ldd	r24, Y+19	; 0x13
    14e8:	9c 89       	ldd	r25, Y+20	; 0x14
    14ea:	00 97       	sbiw	r24, 0x00	; 0
    14ec:	69 f7       	brne	.-38     	; 0x14c8 <CLCD_voidSendFallingEdge+0xb2>
    14ee:	14 c0       	rjmp	.+40     	; 0x1518 <CLCD_voidSendFallingEdge+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14f0:	6d 89       	ldd	r22, Y+21	; 0x15
    14f2:	7e 89       	ldd	r23, Y+22	; 0x16
    14f4:	8f 89       	ldd	r24, Y+23	; 0x17
    14f6:	98 8d       	ldd	r25, Y+24	; 0x18
    14f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14fc:	dc 01       	movw	r26, r24
    14fe:	cb 01       	movw	r24, r22
    1500:	9c 8b       	std	Y+20, r25	; 0x14
    1502:	8b 8b       	std	Y+19, r24	; 0x13
    1504:	8b 89       	ldd	r24, Y+19	; 0x13
    1506:	9c 89       	ldd	r25, Y+20	; 0x14
    1508:	98 8b       	std	Y+16, r25	; 0x10
    150a:	8f 87       	std	Y+15, r24	; 0x0f
    150c:	8f 85       	ldd	r24, Y+15	; 0x0f
    150e:	98 89       	ldd	r25, Y+16	; 0x10
    1510:	01 97       	sbiw	r24, 0x01	; 1
    1512:	f1 f7       	brne	.-4      	; 0x1510 <CLCD_voidSendFallingEdge+0xfa>
    1514:	98 8b       	std	Y+16, r25	; 0x10
    1516:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_voidSetPinValue(CLCD_CONTROL_PORT, CLCD_EN_PIN, DIO_PIN_LOW);
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	62 e0       	ldi	r22, 0x02	; 2
    151c:	40 e0       	ldi	r20, 0x00	; 0
    151e:	0e 94 14 0c 	call	0x1828	; 0x1828 <MDIO_voidSetPinValue>
    1522:	80 e0       	ldi	r24, 0x00	; 0
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	a0 e8       	ldi	r26, 0x80	; 128
    1528:	bf e3       	ldi	r27, 0x3F	; 63
    152a:	8b 87       	std	Y+11, r24	; 0x0b
    152c:	9c 87       	std	Y+12, r25	; 0x0c
    152e:	ad 87       	std	Y+13, r26	; 0x0d
    1530:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1532:	6b 85       	ldd	r22, Y+11	; 0x0b
    1534:	7c 85       	ldd	r23, Y+12	; 0x0c
    1536:	8d 85       	ldd	r24, Y+13	; 0x0d
    1538:	9e 85       	ldd	r25, Y+14	; 0x0e
    153a:	20 e0       	ldi	r18, 0x00	; 0
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	4a ef       	ldi	r20, 0xFA	; 250
    1540:	54 e4       	ldi	r21, 0x44	; 68
    1542:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1546:	dc 01       	movw	r26, r24
    1548:	cb 01       	movw	r24, r22
    154a:	8f 83       	std	Y+7, r24	; 0x07
    154c:	98 87       	std	Y+8, r25	; 0x08
    154e:	a9 87       	std	Y+9, r26	; 0x09
    1550:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1552:	6f 81       	ldd	r22, Y+7	; 0x07
    1554:	78 85       	ldd	r23, Y+8	; 0x08
    1556:	89 85       	ldd	r24, Y+9	; 0x09
    1558:	9a 85       	ldd	r25, Y+10	; 0x0a
    155a:	20 e0       	ldi	r18, 0x00	; 0
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	40 e8       	ldi	r20, 0x80	; 128
    1560:	5f e3       	ldi	r21, 0x3F	; 63
    1562:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1566:	88 23       	and	r24, r24
    1568:	2c f4       	brge	.+10     	; 0x1574 <CLCD_voidSendFallingEdge+0x15e>
		__ticks = 1;
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	9e 83       	std	Y+6, r25	; 0x06
    1570:	8d 83       	std	Y+5, r24	; 0x05
    1572:	3f c0       	rjmp	.+126    	; 0x15f2 <CLCD_voidSendFallingEdge+0x1dc>
	else if (__tmp > 65535)
    1574:	6f 81       	ldd	r22, Y+7	; 0x07
    1576:	78 85       	ldd	r23, Y+8	; 0x08
    1578:	89 85       	ldd	r24, Y+9	; 0x09
    157a:	9a 85       	ldd	r25, Y+10	; 0x0a
    157c:	20 e0       	ldi	r18, 0x00	; 0
    157e:	3f ef       	ldi	r19, 0xFF	; 255
    1580:	4f e7       	ldi	r20, 0x7F	; 127
    1582:	57 e4       	ldi	r21, 0x47	; 71
    1584:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1588:	18 16       	cp	r1, r24
    158a:	4c f5       	brge	.+82     	; 0x15de <CLCD_voidSendFallingEdge+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    158c:	6b 85       	ldd	r22, Y+11	; 0x0b
    158e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1590:	8d 85       	ldd	r24, Y+13	; 0x0d
    1592:	9e 85       	ldd	r25, Y+14	; 0x0e
    1594:	20 e0       	ldi	r18, 0x00	; 0
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	40 e2       	ldi	r20, 0x20	; 32
    159a:	51 e4       	ldi	r21, 0x41	; 65
    159c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15a0:	dc 01       	movw	r26, r24
    15a2:	cb 01       	movw	r24, r22
    15a4:	bc 01       	movw	r22, r24
    15a6:	cd 01       	movw	r24, r26
    15a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15ac:	dc 01       	movw	r26, r24
    15ae:	cb 01       	movw	r24, r22
    15b0:	9e 83       	std	Y+6, r25	; 0x06
    15b2:	8d 83       	std	Y+5, r24	; 0x05
    15b4:	0f c0       	rjmp	.+30     	; 0x15d4 <CLCD_voidSendFallingEdge+0x1be>
    15b6:	88 ec       	ldi	r24, 0xC8	; 200
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	9c 83       	std	Y+4, r25	; 0x04
    15bc:	8b 83       	std	Y+3, r24	; 0x03
    15be:	8b 81       	ldd	r24, Y+3	; 0x03
    15c0:	9c 81       	ldd	r25, Y+4	; 0x04
    15c2:	01 97       	sbiw	r24, 0x01	; 1
    15c4:	f1 f7       	brne	.-4      	; 0x15c2 <CLCD_voidSendFallingEdge+0x1ac>
    15c6:	9c 83       	std	Y+4, r25	; 0x04
    15c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ca:	8d 81       	ldd	r24, Y+5	; 0x05
    15cc:	9e 81       	ldd	r25, Y+6	; 0x06
    15ce:	01 97       	sbiw	r24, 0x01	; 1
    15d0:	9e 83       	std	Y+6, r25	; 0x06
    15d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15d4:	8d 81       	ldd	r24, Y+5	; 0x05
    15d6:	9e 81       	ldd	r25, Y+6	; 0x06
    15d8:	00 97       	sbiw	r24, 0x00	; 0
    15da:	69 f7       	brne	.-38     	; 0x15b6 <CLCD_voidSendFallingEdge+0x1a0>
    15dc:	14 c0       	rjmp	.+40     	; 0x1606 <CLCD_voidSendFallingEdge+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15de:	6f 81       	ldd	r22, Y+7	; 0x07
    15e0:	78 85       	ldd	r23, Y+8	; 0x08
    15e2:	89 85       	ldd	r24, Y+9	; 0x09
    15e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    15e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15ea:	dc 01       	movw	r26, r24
    15ec:	cb 01       	movw	r24, r22
    15ee:	9e 83       	std	Y+6, r25	; 0x06
    15f0:	8d 83       	std	Y+5, r24	; 0x05
    15f2:	8d 81       	ldd	r24, Y+5	; 0x05
    15f4:	9e 81       	ldd	r25, Y+6	; 0x06
    15f6:	9a 83       	std	Y+2, r25	; 0x02
    15f8:	89 83       	std	Y+1, r24	; 0x01
    15fa:	89 81       	ldd	r24, Y+1	; 0x01
    15fc:	9a 81       	ldd	r25, Y+2	; 0x02
    15fe:	01 97       	sbiw	r24, 0x01	; 1
    1600:	f1 f7       	brne	.-4      	; 0x15fe <CLCD_voidSendFallingEdge+0x1e8>
    1602:	9a 83       	std	Y+2, r25	; 0x02
    1604:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);
 }
    1606:	6c 96       	adiw	r28, 0x1c	; 28
    1608:	0f b6       	in	r0, 0x3f	; 63
    160a:	f8 94       	cli
    160c:	de bf       	out	0x3e, r29	; 62
    160e:	0f be       	out	0x3f, r0	; 63
    1610:	cd bf       	out	0x3d, r28	; 61
    1612:	cf 91       	pop	r28
    1614:	df 91       	pop	r29
    1616:	08 95       	ret

00001618 <MDIO_voidSetPinDirection>:

#include "DIO_interface.h"
#include "DIO_private.h"

void MDIO_voidSetPinDirection (u8 A_u8PortNo , u8 A_u8PinNo , u8 A_u8PinDirection)
{
    1618:	df 93       	push	r29
    161a:	cf 93       	push	r28
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
    1620:	27 97       	sbiw	r28, 0x07	; 7
    1622:	0f b6       	in	r0, 0x3f	; 63
    1624:	f8 94       	cli
    1626:	de bf       	out	0x3e, r29	; 62
    1628:	0f be       	out	0x3f, r0	; 63
    162a:	cd bf       	out	0x3d, r28	; 61
    162c:	89 83       	std	Y+1, r24	; 0x01
    162e:	6a 83       	std	Y+2, r22	; 0x02
    1630:	4b 83       	std	Y+3, r20	; 0x03

	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((A_u8PortNo <= DIO_PORTD) && (A_u8PinNo <= DIO_PIN7))
    1632:	89 81       	ldd	r24, Y+1	; 0x01
    1634:	84 30       	cpi	r24, 0x04	; 4
    1636:	08 f0       	brcs	.+2      	; 0x163a <MDIO_voidSetPinDirection+0x22>
    1638:	ee c0       	rjmp	.+476    	; 0x1816 <MDIO_voidSetPinDirection+0x1fe>
    163a:	8a 81       	ldd	r24, Y+2	; 0x02
    163c:	88 30       	cpi	r24, 0x08	; 8
    163e:	08 f0       	brcs	.+2      	; 0x1642 <MDIO_voidSetPinDirection+0x2a>
    1640:	ea c0       	rjmp	.+468    	; 0x1816 <MDIO_voidSetPinDirection+0x1fe>
	{
		if ( A_u8PinDirection == DIO_PIN_OUTPUT )
    1642:	8b 81       	ldd	r24, Y+3	; 0x03
    1644:	81 30       	cpi	r24, 0x01	; 1
    1646:	09 f0       	breq	.+2      	; 0x164a <MDIO_voidSetPinDirection+0x32>
    1648:	6f c0       	rjmp	.+222    	; 0x1728 <MDIO_voidSetPinDirection+0x110>
		{
			/* Check on the Required PORT Number */
			switch (A_u8PortNo)
    164a:	89 81       	ldd	r24, Y+1	; 0x01
    164c:	28 2f       	mov	r18, r24
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	3f 83       	std	Y+7, r19	; 0x07
    1652:	2e 83       	std	Y+6, r18	; 0x06
    1654:	8e 81       	ldd	r24, Y+6	; 0x06
    1656:	9f 81       	ldd	r25, Y+7	; 0x07
    1658:	81 30       	cpi	r24, 0x01	; 1
    165a:	91 05       	cpc	r25, r1
    165c:	49 f1       	breq	.+82     	; 0x16b0 <MDIO_voidSetPinDirection+0x98>
    165e:	2e 81       	ldd	r18, Y+6	; 0x06
    1660:	3f 81       	ldd	r19, Y+7	; 0x07
    1662:	22 30       	cpi	r18, 0x02	; 2
    1664:	31 05       	cpc	r19, r1
    1666:	2c f4       	brge	.+10     	; 0x1672 <MDIO_voidSetPinDirection+0x5a>
    1668:	8e 81       	ldd	r24, Y+6	; 0x06
    166a:	9f 81       	ldd	r25, Y+7	; 0x07
    166c:	00 97       	sbiw	r24, 0x00	; 0
    166e:	61 f0       	breq	.+24     	; 0x1688 <MDIO_voidSetPinDirection+0x70>
    1670:	d2 c0       	rjmp	.+420    	; 0x1816 <MDIO_voidSetPinDirection+0x1fe>
    1672:	2e 81       	ldd	r18, Y+6	; 0x06
    1674:	3f 81       	ldd	r19, Y+7	; 0x07
    1676:	22 30       	cpi	r18, 0x02	; 2
    1678:	31 05       	cpc	r19, r1
    167a:	71 f1       	breq	.+92     	; 0x16d8 <MDIO_voidSetPinDirection+0xc0>
    167c:	8e 81       	ldd	r24, Y+6	; 0x06
    167e:	9f 81       	ldd	r25, Y+7	; 0x07
    1680:	83 30       	cpi	r24, 0x03	; 3
    1682:	91 05       	cpc	r25, r1
    1684:	e9 f1       	breq	.+122    	; 0x1700 <MDIO_voidSetPinDirection+0xe8>
    1686:	c7 c0       	rjmp	.+398    	; 0x1816 <MDIO_voidSetPinDirection+0x1fe>
			{
			case DIO_PORTA: SET_BIT(DDRA_Register,A_u8PinNo); break;
    1688:	aa e3       	ldi	r26, 0x3A	; 58
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	ea e3       	ldi	r30, 0x3A	; 58
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	48 2f       	mov	r20, r24
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
    1696:	28 2f       	mov	r18, r24
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	02 2e       	mov	r0, r18
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <MDIO_voidSetPinDirection+0x8e>
    16a2:	88 0f       	add	r24, r24
    16a4:	99 1f       	adc	r25, r25
    16a6:	0a 94       	dec	r0
    16a8:	e2 f7       	brpl	.-8      	; 0x16a2 <MDIO_voidSetPinDirection+0x8a>
    16aa:	84 2b       	or	r24, r20
    16ac:	8c 93       	st	X, r24
    16ae:	b3 c0       	rjmp	.+358    	; 0x1816 <MDIO_voidSetPinDirection+0x1fe>
			case DIO_PORTB: SET_BIT(DDRB_Register,A_u8PinNo); break;
    16b0:	a7 e3       	ldi	r26, 0x37	; 55
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	e7 e3       	ldi	r30, 0x37	; 55
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	48 2f       	mov	r20, r24
    16bc:	8a 81       	ldd	r24, Y+2	; 0x02
    16be:	28 2f       	mov	r18, r24
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	02 2e       	mov	r0, r18
    16c8:	02 c0       	rjmp	.+4      	; 0x16ce <MDIO_voidSetPinDirection+0xb6>
    16ca:	88 0f       	add	r24, r24
    16cc:	99 1f       	adc	r25, r25
    16ce:	0a 94       	dec	r0
    16d0:	e2 f7       	brpl	.-8      	; 0x16ca <MDIO_voidSetPinDirection+0xb2>
    16d2:	84 2b       	or	r24, r20
    16d4:	8c 93       	st	X, r24
    16d6:	9f c0       	rjmp	.+318    	; 0x1816 <MDIO_voidSetPinDirection+0x1fe>
			case DIO_PORTC: SET_BIT(DDRC_Register,A_u8PinNo); break;
    16d8:	a4 e3       	ldi	r26, 0x34	; 52
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e4 e3       	ldi	r30, 0x34	; 52
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	48 2f       	mov	r20, r24
    16e4:	8a 81       	ldd	r24, Y+2	; 0x02
    16e6:	28 2f       	mov	r18, r24
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	02 2e       	mov	r0, r18
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <MDIO_voidSetPinDirection+0xde>
    16f2:	88 0f       	add	r24, r24
    16f4:	99 1f       	adc	r25, r25
    16f6:	0a 94       	dec	r0
    16f8:	e2 f7       	brpl	.-8      	; 0x16f2 <MDIO_voidSetPinDirection+0xda>
    16fa:	84 2b       	or	r24, r20
    16fc:	8c 93       	st	X, r24
    16fe:	8b c0       	rjmp	.+278    	; 0x1816 <MDIO_voidSetPinDirection+0x1fe>
			case DIO_PORTD: SET_BIT(DDRD_Register,A_u8PinNo); break;
    1700:	a1 e3       	ldi	r26, 0x31	; 49
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	e1 e3       	ldi	r30, 0x31	; 49
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	48 2f       	mov	r20, r24
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	28 2f       	mov	r18, r24
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	02 2e       	mov	r0, r18
    1718:	02 c0       	rjmp	.+4      	; 0x171e <MDIO_voidSetPinDirection+0x106>
    171a:	88 0f       	add	r24, r24
    171c:	99 1f       	adc	r25, r25
    171e:	0a 94       	dec	r0
    1720:	e2 f7       	brpl	.-8      	; 0x171a <MDIO_voidSetPinDirection+0x102>
    1722:	84 2b       	or	r24, r20
    1724:	8c 93       	st	X, r24
    1726:	77 c0       	rjmp	.+238    	; 0x1816 <MDIO_voidSetPinDirection+0x1fe>
			}
		}

		else if ( A_u8PinDirection == DIO_PIN_INPUT )
    1728:	8b 81       	ldd	r24, Y+3	; 0x03
    172a:	88 23       	and	r24, r24
    172c:	09 f0       	breq	.+2      	; 0x1730 <MDIO_voidSetPinDirection+0x118>
    172e:	73 c0       	rjmp	.+230    	; 0x1816 <MDIO_voidSetPinDirection+0x1fe>
		{
			/* Check on the Required PORT Number */
			switch (A_u8PortNo)
    1730:	89 81       	ldd	r24, Y+1	; 0x01
    1732:	28 2f       	mov	r18, r24
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	3d 83       	std	Y+5, r19	; 0x05
    1738:	2c 83       	std	Y+4, r18	; 0x04
    173a:	8c 81       	ldd	r24, Y+4	; 0x04
    173c:	9d 81       	ldd	r25, Y+5	; 0x05
    173e:	81 30       	cpi	r24, 0x01	; 1
    1740:	91 05       	cpc	r25, r1
    1742:	59 f1       	breq	.+86     	; 0x179a <MDIO_voidSetPinDirection+0x182>
    1744:	2c 81       	ldd	r18, Y+4	; 0x04
    1746:	3d 81       	ldd	r19, Y+5	; 0x05
    1748:	22 30       	cpi	r18, 0x02	; 2
    174a:	31 05       	cpc	r19, r1
    174c:	2c f4       	brge	.+10     	; 0x1758 <MDIO_voidSetPinDirection+0x140>
    174e:	8c 81       	ldd	r24, Y+4	; 0x04
    1750:	9d 81       	ldd	r25, Y+5	; 0x05
    1752:	00 97       	sbiw	r24, 0x00	; 0
    1754:	69 f0       	breq	.+26     	; 0x1770 <MDIO_voidSetPinDirection+0x158>
    1756:	5f c0       	rjmp	.+190    	; 0x1816 <MDIO_voidSetPinDirection+0x1fe>
    1758:	2c 81       	ldd	r18, Y+4	; 0x04
    175a:	3d 81       	ldd	r19, Y+5	; 0x05
    175c:	22 30       	cpi	r18, 0x02	; 2
    175e:	31 05       	cpc	r19, r1
    1760:	89 f1       	breq	.+98     	; 0x17c4 <MDIO_voidSetPinDirection+0x1ac>
    1762:	8c 81       	ldd	r24, Y+4	; 0x04
    1764:	9d 81       	ldd	r25, Y+5	; 0x05
    1766:	83 30       	cpi	r24, 0x03	; 3
    1768:	91 05       	cpc	r25, r1
    176a:	09 f4       	brne	.+2      	; 0x176e <MDIO_voidSetPinDirection+0x156>
    176c:	40 c0       	rjmp	.+128    	; 0x17ee <MDIO_voidSetPinDirection+0x1d6>
    176e:	53 c0       	rjmp	.+166    	; 0x1816 <MDIO_voidSetPinDirection+0x1fe>
			{
			case DIO_PORTA: CLR_BIT(DDRA_Register,A_u8PinNo); break;
    1770:	aa e3       	ldi	r26, 0x3A	; 58
    1772:	b0 e0       	ldi	r27, 0x00	; 0
    1774:	ea e3       	ldi	r30, 0x3A	; 58
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	48 2f       	mov	r20, r24
    177c:	8a 81       	ldd	r24, Y+2	; 0x02
    177e:	28 2f       	mov	r18, r24
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	02 2e       	mov	r0, r18
    1788:	02 c0       	rjmp	.+4      	; 0x178e <MDIO_voidSetPinDirection+0x176>
    178a:	88 0f       	add	r24, r24
    178c:	99 1f       	adc	r25, r25
    178e:	0a 94       	dec	r0
    1790:	e2 f7       	brpl	.-8      	; 0x178a <MDIO_voidSetPinDirection+0x172>
    1792:	80 95       	com	r24
    1794:	84 23       	and	r24, r20
    1796:	8c 93       	st	X, r24
    1798:	3e c0       	rjmp	.+124    	; 0x1816 <MDIO_voidSetPinDirection+0x1fe>
			case DIO_PORTB: CLR_BIT(DDRB_Register,A_u8PinNo); break;
    179a:	a7 e3       	ldi	r26, 0x37	; 55
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	e7 e3       	ldi	r30, 0x37	; 55
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	48 2f       	mov	r20, r24
    17a6:	8a 81       	ldd	r24, Y+2	; 0x02
    17a8:	28 2f       	mov	r18, r24
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	02 2e       	mov	r0, r18
    17b2:	02 c0       	rjmp	.+4      	; 0x17b8 <MDIO_voidSetPinDirection+0x1a0>
    17b4:	88 0f       	add	r24, r24
    17b6:	99 1f       	adc	r25, r25
    17b8:	0a 94       	dec	r0
    17ba:	e2 f7       	brpl	.-8      	; 0x17b4 <MDIO_voidSetPinDirection+0x19c>
    17bc:	80 95       	com	r24
    17be:	84 23       	and	r24, r20
    17c0:	8c 93       	st	X, r24
    17c2:	29 c0       	rjmp	.+82     	; 0x1816 <MDIO_voidSetPinDirection+0x1fe>
			case DIO_PORTC: CLR_BIT(DDRC_Register,A_u8PinNo); break;
    17c4:	a4 e3       	ldi	r26, 0x34	; 52
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	e4 e3       	ldi	r30, 0x34	; 52
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	48 2f       	mov	r20, r24
    17d0:	8a 81       	ldd	r24, Y+2	; 0x02
    17d2:	28 2f       	mov	r18, r24
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	02 2e       	mov	r0, r18
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <MDIO_voidSetPinDirection+0x1ca>
    17de:	88 0f       	add	r24, r24
    17e0:	99 1f       	adc	r25, r25
    17e2:	0a 94       	dec	r0
    17e4:	e2 f7       	brpl	.-8      	; 0x17de <MDIO_voidSetPinDirection+0x1c6>
    17e6:	80 95       	com	r24
    17e8:	84 23       	and	r24, r20
    17ea:	8c 93       	st	X, r24
    17ec:	14 c0       	rjmp	.+40     	; 0x1816 <MDIO_voidSetPinDirection+0x1fe>
			case DIO_PORTD: CLR_BIT(DDRD_Register,A_u8PinNo); break;
    17ee:	a1 e3       	ldi	r26, 0x31	; 49
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	e1 e3       	ldi	r30, 0x31	; 49
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	48 2f       	mov	r20, r24
    17fa:	8a 81       	ldd	r24, Y+2	; 0x02
    17fc:	28 2f       	mov	r18, r24
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	02 2e       	mov	r0, r18
    1806:	02 c0       	rjmp	.+4      	; 0x180c <MDIO_voidSetPinDirection+0x1f4>
    1808:	88 0f       	add	r24, r24
    180a:	99 1f       	adc	r25, r25
    180c:	0a 94       	dec	r0
    180e:	e2 f7       	brpl	.-8      	; 0x1808 <MDIO_voidSetPinDirection+0x1f0>
    1810:	80 95       	com	r24
    1812:	84 23       	and	r24, r20
    1814:	8c 93       	st	X, r24
			}
		}
	}
}
    1816:	27 96       	adiw	r28, 0x07	; 7
    1818:	0f b6       	in	r0, 0x3f	; 63
    181a:	f8 94       	cli
    181c:	de bf       	out	0x3e, r29	; 62
    181e:	0f be       	out	0x3f, r0	; 63
    1820:	cd bf       	out	0x3d, r28	; 61
    1822:	cf 91       	pop	r28
    1824:	df 91       	pop	r29
    1826:	08 95       	ret

00001828 <MDIO_voidSetPinValue>:

void MDIO_voidSetPinValue (u8 A_u8PortNo , u8 A_u8PinNo  , u8 A_u8Value )
{	
    1828:	df 93       	push	r29
    182a:	cf 93       	push	r28
    182c:	cd b7       	in	r28, 0x3d	; 61
    182e:	de b7       	in	r29, 0x3e	; 62
    1830:	27 97       	sbiw	r28, 0x07	; 7
    1832:	0f b6       	in	r0, 0x3f	; 63
    1834:	f8 94       	cli
    1836:	de bf       	out	0x3e, r29	; 62
    1838:	0f be       	out	0x3f, r0	; 63
    183a:	cd bf       	out	0x3d, r28	; 61
    183c:	89 83       	std	Y+1, r24	; 0x01
    183e:	6a 83       	std	Y+2, r22	; 0x02
    1840:	4b 83       	std	Y+3, r20	; 0x03
		if(A_u8Value==DIO_PIN_HIGH)
    1842:	8b 81       	ldd	r24, Y+3	; 0x03
    1844:	81 30       	cpi	r24, 0x01	; 1
    1846:	09 f0       	breq	.+2      	; 0x184a <MDIO_voidSetPinValue+0x22>
    1848:	6f c0       	rjmp	.+222    	; 0x1928 <MDIO_voidSetPinValue+0x100>
		{
			switch (A_u8PortNo)
    184a:	89 81       	ldd	r24, Y+1	; 0x01
    184c:	28 2f       	mov	r18, r24
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	3f 83       	std	Y+7, r19	; 0x07
    1852:	2e 83       	std	Y+6, r18	; 0x06
    1854:	8e 81       	ldd	r24, Y+6	; 0x06
    1856:	9f 81       	ldd	r25, Y+7	; 0x07
    1858:	81 30       	cpi	r24, 0x01	; 1
    185a:	91 05       	cpc	r25, r1
    185c:	49 f1       	breq	.+82     	; 0x18b0 <MDIO_voidSetPinValue+0x88>
    185e:	2e 81       	ldd	r18, Y+6	; 0x06
    1860:	3f 81       	ldd	r19, Y+7	; 0x07
    1862:	22 30       	cpi	r18, 0x02	; 2
    1864:	31 05       	cpc	r19, r1
    1866:	2c f4       	brge	.+10     	; 0x1872 <MDIO_voidSetPinValue+0x4a>
    1868:	8e 81       	ldd	r24, Y+6	; 0x06
    186a:	9f 81       	ldd	r25, Y+7	; 0x07
    186c:	00 97       	sbiw	r24, 0x00	; 0
    186e:	61 f0       	breq	.+24     	; 0x1888 <MDIO_voidSetPinValue+0x60>
    1870:	d2 c0       	rjmp	.+420    	; 0x1a16 <MDIO_voidSetPinValue+0x1ee>
    1872:	2e 81       	ldd	r18, Y+6	; 0x06
    1874:	3f 81       	ldd	r19, Y+7	; 0x07
    1876:	22 30       	cpi	r18, 0x02	; 2
    1878:	31 05       	cpc	r19, r1
    187a:	71 f1       	breq	.+92     	; 0x18d8 <MDIO_voidSetPinValue+0xb0>
    187c:	8e 81       	ldd	r24, Y+6	; 0x06
    187e:	9f 81       	ldd	r25, Y+7	; 0x07
    1880:	83 30       	cpi	r24, 0x03	; 3
    1882:	91 05       	cpc	r25, r1
    1884:	e9 f1       	breq	.+122    	; 0x1900 <MDIO_voidSetPinValue+0xd8>
    1886:	c7 c0       	rjmp	.+398    	; 0x1a16 <MDIO_voidSetPinValue+0x1ee>
			{
			case DIO_PORTA: SET_BIT(PORTA,A_u8PinNo); break;
    1888:	ab e3       	ldi	r26, 0x3B	; 59
    188a:	b0 e0       	ldi	r27, 0x00	; 0
    188c:	eb e3       	ldi	r30, 0x3B	; 59
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	80 81       	ld	r24, Z
    1892:	48 2f       	mov	r20, r24
    1894:	8a 81       	ldd	r24, Y+2	; 0x02
    1896:	28 2f       	mov	r18, r24
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	02 2e       	mov	r0, r18
    18a0:	02 c0       	rjmp	.+4      	; 0x18a6 <MDIO_voidSetPinValue+0x7e>
    18a2:	88 0f       	add	r24, r24
    18a4:	99 1f       	adc	r25, r25
    18a6:	0a 94       	dec	r0
    18a8:	e2 f7       	brpl	.-8      	; 0x18a2 <MDIO_voidSetPinValue+0x7a>
    18aa:	84 2b       	or	r24, r20
    18ac:	8c 93       	st	X, r24
    18ae:	b3 c0       	rjmp	.+358    	; 0x1a16 <MDIO_voidSetPinValue+0x1ee>
			case DIO_PORTB: SET_BIT(PORTB,A_u8PinNo); break;
    18b0:	a8 e3       	ldi	r26, 0x38	; 56
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	e8 e3       	ldi	r30, 0x38	; 56
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	48 2f       	mov	r20, r24
    18bc:	8a 81       	ldd	r24, Y+2	; 0x02
    18be:	28 2f       	mov	r18, r24
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	02 2e       	mov	r0, r18
    18c8:	02 c0       	rjmp	.+4      	; 0x18ce <MDIO_voidSetPinValue+0xa6>
    18ca:	88 0f       	add	r24, r24
    18cc:	99 1f       	adc	r25, r25
    18ce:	0a 94       	dec	r0
    18d0:	e2 f7       	brpl	.-8      	; 0x18ca <MDIO_voidSetPinValue+0xa2>
    18d2:	84 2b       	or	r24, r20
    18d4:	8c 93       	st	X, r24
    18d6:	9f c0       	rjmp	.+318    	; 0x1a16 <MDIO_voidSetPinValue+0x1ee>
			case DIO_PORTC: SET_BIT(PORTC,A_u8PinNo); break;
    18d8:	a5 e3       	ldi	r26, 0x35	; 53
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	e5 e3       	ldi	r30, 0x35	; 53
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	48 2f       	mov	r20, r24
    18e4:	8a 81       	ldd	r24, Y+2	; 0x02
    18e6:	28 2f       	mov	r18, r24
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	02 2e       	mov	r0, r18
    18f0:	02 c0       	rjmp	.+4      	; 0x18f6 <MDIO_voidSetPinValue+0xce>
    18f2:	88 0f       	add	r24, r24
    18f4:	99 1f       	adc	r25, r25
    18f6:	0a 94       	dec	r0
    18f8:	e2 f7       	brpl	.-8      	; 0x18f2 <MDIO_voidSetPinValue+0xca>
    18fa:	84 2b       	or	r24, r20
    18fc:	8c 93       	st	X, r24
    18fe:	8b c0       	rjmp	.+278    	; 0x1a16 <MDIO_voidSetPinValue+0x1ee>
			case DIO_PORTD: SET_BIT(PORTD,A_u8PinNo); break;
    1900:	a2 e3       	ldi	r26, 0x32	; 50
    1902:	b0 e0       	ldi	r27, 0x00	; 0
    1904:	e2 e3       	ldi	r30, 0x32	; 50
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	48 2f       	mov	r20, r24
    190c:	8a 81       	ldd	r24, Y+2	; 0x02
    190e:	28 2f       	mov	r18, r24
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	02 2e       	mov	r0, r18
    1918:	02 c0       	rjmp	.+4      	; 0x191e <MDIO_voidSetPinValue+0xf6>
    191a:	88 0f       	add	r24, r24
    191c:	99 1f       	adc	r25, r25
    191e:	0a 94       	dec	r0
    1920:	e2 f7       	brpl	.-8      	; 0x191a <MDIO_voidSetPinValue+0xf2>
    1922:	84 2b       	or	r24, r20
    1924:	8c 93       	st	X, r24
    1926:	77 c0       	rjmp	.+238    	; 0x1a16 <MDIO_voidSetPinValue+0x1ee>
			}
		}
		else if(A_u8Value==DIO_PIN_LOW)
    1928:	8b 81       	ldd	r24, Y+3	; 0x03
    192a:	88 23       	and	r24, r24
    192c:	09 f0       	breq	.+2      	; 0x1930 <MDIO_voidSetPinValue+0x108>
    192e:	73 c0       	rjmp	.+230    	; 0x1a16 <MDIO_voidSetPinValue+0x1ee>
		{
			switch (A_u8PortNo)
    1930:	89 81       	ldd	r24, Y+1	; 0x01
    1932:	28 2f       	mov	r18, r24
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	3d 83       	std	Y+5, r19	; 0x05
    1938:	2c 83       	std	Y+4, r18	; 0x04
    193a:	8c 81       	ldd	r24, Y+4	; 0x04
    193c:	9d 81       	ldd	r25, Y+5	; 0x05
    193e:	81 30       	cpi	r24, 0x01	; 1
    1940:	91 05       	cpc	r25, r1
    1942:	59 f1       	breq	.+86     	; 0x199a <MDIO_voidSetPinValue+0x172>
    1944:	2c 81       	ldd	r18, Y+4	; 0x04
    1946:	3d 81       	ldd	r19, Y+5	; 0x05
    1948:	22 30       	cpi	r18, 0x02	; 2
    194a:	31 05       	cpc	r19, r1
    194c:	2c f4       	brge	.+10     	; 0x1958 <MDIO_voidSetPinValue+0x130>
    194e:	8c 81       	ldd	r24, Y+4	; 0x04
    1950:	9d 81       	ldd	r25, Y+5	; 0x05
    1952:	00 97       	sbiw	r24, 0x00	; 0
    1954:	69 f0       	breq	.+26     	; 0x1970 <MDIO_voidSetPinValue+0x148>
    1956:	5f c0       	rjmp	.+190    	; 0x1a16 <MDIO_voidSetPinValue+0x1ee>
    1958:	2c 81       	ldd	r18, Y+4	; 0x04
    195a:	3d 81       	ldd	r19, Y+5	; 0x05
    195c:	22 30       	cpi	r18, 0x02	; 2
    195e:	31 05       	cpc	r19, r1
    1960:	89 f1       	breq	.+98     	; 0x19c4 <MDIO_voidSetPinValue+0x19c>
    1962:	8c 81       	ldd	r24, Y+4	; 0x04
    1964:	9d 81       	ldd	r25, Y+5	; 0x05
    1966:	83 30       	cpi	r24, 0x03	; 3
    1968:	91 05       	cpc	r25, r1
    196a:	09 f4       	brne	.+2      	; 0x196e <MDIO_voidSetPinValue+0x146>
    196c:	40 c0       	rjmp	.+128    	; 0x19ee <MDIO_voidSetPinValue+0x1c6>
    196e:	53 c0       	rjmp	.+166    	; 0x1a16 <MDIO_voidSetPinValue+0x1ee>
			{
			case DIO_PORTA: CLR_BIT(PORTA,A_u8PinNo); break;
    1970:	ab e3       	ldi	r26, 0x3B	; 59
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	eb e3       	ldi	r30, 0x3B	; 59
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	48 2f       	mov	r20, r24
    197c:	8a 81       	ldd	r24, Y+2	; 0x02
    197e:	28 2f       	mov	r18, r24
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	02 2e       	mov	r0, r18
    1988:	02 c0       	rjmp	.+4      	; 0x198e <MDIO_voidSetPinValue+0x166>
    198a:	88 0f       	add	r24, r24
    198c:	99 1f       	adc	r25, r25
    198e:	0a 94       	dec	r0
    1990:	e2 f7       	brpl	.-8      	; 0x198a <MDIO_voidSetPinValue+0x162>
    1992:	80 95       	com	r24
    1994:	84 23       	and	r24, r20
    1996:	8c 93       	st	X, r24
    1998:	3e c0       	rjmp	.+124    	; 0x1a16 <MDIO_voidSetPinValue+0x1ee>
			case DIO_PORTB: CLR_BIT(PORTB,A_u8PinNo); break;
    199a:	a8 e3       	ldi	r26, 0x38	; 56
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	e8 e3       	ldi	r30, 0x38	; 56
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	80 81       	ld	r24, Z
    19a4:	48 2f       	mov	r20, r24
    19a6:	8a 81       	ldd	r24, Y+2	; 0x02
    19a8:	28 2f       	mov	r18, r24
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	02 2e       	mov	r0, r18
    19b2:	02 c0       	rjmp	.+4      	; 0x19b8 <MDIO_voidSetPinValue+0x190>
    19b4:	88 0f       	add	r24, r24
    19b6:	99 1f       	adc	r25, r25
    19b8:	0a 94       	dec	r0
    19ba:	e2 f7       	brpl	.-8      	; 0x19b4 <MDIO_voidSetPinValue+0x18c>
    19bc:	80 95       	com	r24
    19be:	84 23       	and	r24, r20
    19c0:	8c 93       	st	X, r24
    19c2:	29 c0       	rjmp	.+82     	; 0x1a16 <MDIO_voidSetPinValue+0x1ee>
			case DIO_PORTC: CLR_BIT(PORTC,A_u8PinNo); break;
    19c4:	a5 e3       	ldi	r26, 0x35	; 53
    19c6:	b0 e0       	ldi	r27, 0x00	; 0
    19c8:	e5 e3       	ldi	r30, 0x35	; 53
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	80 81       	ld	r24, Z
    19ce:	48 2f       	mov	r20, r24
    19d0:	8a 81       	ldd	r24, Y+2	; 0x02
    19d2:	28 2f       	mov	r18, r24
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	02 2e       	mov	r0, r18
    19dc:	02 c0       	rjmp	.+4      	; 0x19e2 <MDIO_voidSetPinValue+0x1ba>
    19de:	88 0f       	add	r24, r24
    19e0:	99 1f       	adc	r25, r25
    19e2:	0a 94       	dec	r0
    19e4:	e2 f7       	brpl	.-8      	; 0x19de <MDIO_voidSetPinValue+0x1b6>
    19e6:	80 95       	com	r24
    19e8:	84 23       	and	r24, r20
    19ea:	8c 93       	st	X, r24
    19ec:	14 c0       	rjmp	.+40     	; 0x1a16 <MDIO_voidSetPinValue+0x1ee>
			case DIO_PORTD: CLR_BIT(PORTD,A_u8PinNo); break;
    19ee:	a2 e3       	ldi	r26, 0x32	; 50
    19f0:	b0 e0       	ldi	r27, 0x00	; 0
    19f2:	e2 e3       	ldi	r30, 0x32	; 50
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	48 2f       	mov	r20, r24
    19fa:	8a 81       	ldd	r24, Y+2	; 0x02
    19fc:	28 2f       	mov	r18, r24
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	02 2e       	mov	r0, r18
    1a06:	02 c0       	rjmp	.+4      	; 0x1a0c <MDIO_voidSetPinValue+0x1e4>
    1a08:	88 0f       	add	r24, r24
    1a0a:	99 1f       	adc	r25, r25
    1a0c:	0a 94       	dec	r0
    1a0e:	e2 f7       	brpl	.-8      	; 0x1a08 <MDIO_voidSetPinValue+0x1e0>
    1a10:	80 95       	com	r24
    1a12:	84 23       	and	r24, r20
    1a14:	8c 93       	st	X, r24
			}
		}
}
    1a16:	27 96       	adiw	r28, 0x07	; 7
    1a18:	0f b6       	in	r0, 0x3f	; 63
    1a1a:	f8 94       	cli
    1a1c:	de bf       	out	0x3e, r29	; 62
    1a1e:	0f be       	out	0x3f, r0	; 63
    1a20:	cd bf       	out	0x3d, r28	; 61
    1a22:	cf 91       	pop	r28
    1a24:	df 91       	pop	r29
    1a26:	08 95       	ret

00001a28 <MDIO_voidClrPinValue>:

void MDIO_voidClrPinValue (u8 A_u8PortNo , u8 A_u8PinNo )
{
    1a28:	df 93       	push	r29
    1a2a:	cf 93       	push	r28
    1a2c:	00 d0       	rcall	.+0      	; 0x1a2e <MDIO_voidClrPinValue+0x6>
    1a2e:	00 d0       	rcall	.+0      	; 0x1a30 <MDIO_voidClrPinValue+0x8>
    1a30:	cd b7       	in	r28, 0x3d	; 61
    1a32:	de b7       	in	r29, 0x3e	; 62
    1a34:	89 83       	std	Y+1, r24	; 0x01
    1a36:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortNo)
    1a38:	89 81       	ldd	r24, Y+1	; 0x01
    1a3a:	28 2f       	mov	r18, r24
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	3c 83       	std	Y+4, r19	; 0x04
    1a40:	2b 83       	std	Y+3, r18	; 0x03
    1a42:	8b 81       	ldd	r24, Y+3	; 0x03
    1a44:	9c 81       	ldd	r25, Y+4	; 0x04
    1a46:	81 30       	cpi	r24, 0x01	; 1
    1a48:	91 05       	cpc	r25, r1
    1a4a:	59 f1       	breq	.+86     	; 0x1aa2 <MDIO_voidClrPinValue+0x7a>
    1a4c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a4e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a50:	22 30       	cpi	r18, 0x02	; 2
    1a52:	31 05       	cpc	r19, r1
    1a54:	2c f4       	brge	.+10     	; 0x1a60 <MDIO_voidClrPinValue+0x38>
    1a56:	8b 81       	ldd	r24, Y+3	; 0x03
    1a58:	9c 81       	ldd	r25, Y+4	; 0x04
    1a5a:	00 97       	sbiw	r24, 0x00	; 0
    1a5c:	69 f0       	breq	.+26     	; 0x1a78 <MDIO_voidClrPinValue+0x50>
    1a5e:	5f c0       	rjmp	.+190    	; 0x1b1e <MDIO_voidClrPinValue+0xf6>
    1a60:	2b 81       	ldd	r18, Y+3	; 0x03
    1a62:	3c 81       	ldd	r19, Y+4	; 0x04
    1a64:	22 30       	cpi	r18, 0x02	; 2
    1a66:	31 05       	cpc	r19, r1
    1a68:	89 f1       	breq	.+98     	; 0x1acc <MDIO_voidClrPinValue+0xa4>
    1a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6e:	83 30       	cpi	r24, 0x03	; 3
    1a70:	91 05       	cpc	r25, r1
    1a72:	09 f4       	brne	.+2      	; 0x1a76 <MDIO_voidClrPinValue+0x4e>
    1a74:	40 c0       	rjmp	.+128    	; 0x1af6 <MDIO_voidClrPinValue+0xce>
    1a76:	53 c0       	rjmp	.+166    	; 0x1b1e <MDIO_voidClrPinValue+0xf6>
			{
			case DIO_PORTA: CLR_BIT(PORTA,A_u8PinNo); break;
    1a78:	ab e3       	ldi	r26, 0x3B	; 59
    1a7a:	b0 e0       	ldi	r27, 0x00	; 0
    1a7c:	eb e3       	ldi	r30, 0x3B	; 59
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	48 2f       	mov	r20, r24
    1a84:	8a 81       	ldd	r24, Y+2	; 0x02
    1a86:	28 2f       	mov	r18, r24
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	02 2e       	mov	r0, r18
    1a90:	02 c0       	rjmp	.+4      	; 0x1a96 <MDIO_voidClrPinValue+0x6e>
    1a92:	88 0f       	add	r24, r24
    1a94:	99 1f       	adc	r25, r25
    1a96:	0a 94       	dec	r0
    1a98:	e2 f7       	brpl	.-8      	; 0x1a92 <MDIO_voidClrPinValue+0x6a>
    1a9a:	80 95       	com	r24
    1a9c:	84 23       	and	r24, r20
    1a9e:	8c 93       	st	X, r24
    1aa0:	3e c0       	rjmp	.+124    	; 0x1b1e <MDIO_voidClrPinValue+0xf6>
			case DIO_PORTB: CLR_BIT(PORTB,A_u8PinNo); break;
    1aa2:	a8 e3       	ldi	r26, 0x38	; 56
    1aa4:	b0 e0       	ldi	r27, 0x00	; 0
    1aa6:	e8 e3       	ldi	r30, 0x38	; 56
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	48 2f       	mov	r20, r24
    1aae:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab0:	28 2f       	mov	r18, r24
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	02 2e       	mov	r0, r18
    1aba:	02 c0       	rjmp	.+4      	; 0x1ac0 <MDIO_voidClrPinValue+0x98>
    1abc:	88 0f       	add	r24, r24
    1abe:	99 1f       	adc	r25, r25
    1ac0:	0a 94       	dec	r0
    1ac2:	e2 f7       	brpl	.-8      	; 0x1abc <MDIO_voidClrPinValue+0x94>
    1ac4:	80 95       	com	r24
    1ac6:	84 23       	and	r24, r20
    1ac8:	8c 93       	st	X, r24
    1aca:	29 c0       	rjmp	.+82     	; 0x1b1e <MDIO_voidClrPinValue+0xf6>
			case DIO_PORTC: CLR_BIT(PORTC,A_u8PinNo); break;
    1acc:	a5 e3       	ldi	r26, 0x35	; 53
    1ace:	b0 e0       	ldi	r27, 0x00	; 0
    1ad0:	e5 e3       	ldi	r30, 0x35	; 53
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 81       	ld	r24, Z
    1ad6:	48 2f       	mov	r20, r24
    1ad8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ada:	28 2f       	mov	r18, r24
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	02 2e       	mov	r0, r18
    1ae4:	02 c0       	rjmp	.+4      	; 0x1aea <MDIO_voidClrPinValue+0xc2>
    1ae6:	88 0f       	add	r24, r24
    1ae8:	99 1f       	adc	r25, r25
    1aea:	0a 94       	dec	r0
    1aec:	e2 f7       	brpl	.-8      	; 0x1ae6 <MDIO_voidClrPinValue+0xbe>
    1aee:	80 95       	com	r24
    1af0:	84 23       	and	r24, r20
    1af2:	8c 93       	st	X, r24
    1af4:	14 c0       	rjmp	.+40     	; 0x1b1e <MDIO_voidClrPinValue+0xf6>
			case DIO_PORTD: CLR_BIT(PORTD,A_u8PinNo); break;
    1af6:	a2 e3       	ldi	r26, 0x32	; 50
    1af8:	b0 e0       	ldi	r27, 0x00	; 0
    1afa:	e2 e3       	ldi	r30, 0x32	; 50
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	80 81       	ld	r24, Z
    1b00:	48 2f       	mov	r20, r24
    1b02:	8a 81       	ldd	r24, Y+2	; 0x02
    1b04:	28 2f       	mov	r18, r24
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	02 2e       	mov	r0, r18
    1b0e:	02 c0       	rjmp	.+4      	; 0x1b14 <MDIO_voidClrPinValue+0xec>
    1b10:	88 0f       	add	r24, r24
    1b12:	99 1f       	adc	r25, r25
    1b14:	0a 94       	dec	r0
    1b16:	e2 f7       	brpl	.-8      	; 0x1b10 <MDIO_voidClrPinValue+0xe8>
    1b18:	80 95       	com	r24
    1b1a:	84 23       	and	r24, r20
    1b1c:	8c 93       	st	X, r24
			}
}
    1b1e:	0f 90       	pop	r0
    1b20:	0f 90       	pop	r0
    1b22:	0f 90       	pop	r0
    1b24:	0f 90       	pop	r0
    1b26:	cf 91       	pop	r28
    1b28:	df 91       	pop	r29
    1b2a:	08 95       	ret

00001b2c <MDIO_voidGetPinValue>:

void MDIO_voidGetPinValue (u8 A_u8PortNo , u8 A_u8PinNo  , u8 * A_PtrData )
{
    1b2c:	df 93       	push	r29
    1b2e:	cf 93       	push	r28
    1b30:	00 d0       	rcall	.+0      	; 0x1b32 <MDIO_voidGetPinValue+0x6>
    1b32:	00 d0       	rcall	.+0      	; 0x1b34 <MDIO_voidGetPinValue+0x8>
    1b34:	00 d0       	rcall	.+0      	; 0x1b36 <MDIO_voidGetPinValue+0xa>
    1b36:	cd b7       	in	r28, 0x3d	; 61
    1b38:	de b7       	in	r29, 0x3e	; 62
    1b3a:	89 83       	std	Y+1, r24	; 0x01
    1b3c:	6a 83       	std	Y+2, r22	; 0x02
    1b3e:	5c 83       	std	Y+4, r21	; 0x04
    1b40:	4b 83       	std	Y+3, r20	; 0x03
	switch (A_u8PortNo)
    1b42:	89 81       	ldd	r24, Y+1	; 0x01
    1b44:	28 2f       	mov	r18, r24
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	3e 83       	std	Y+6, r19	; 0x06
    1b4a:	2d 83       	std	Y+5, r18	; 0x05
    1b4c:	4d 81       	ldd	r20, Y+5	; 0x05
    1b4e:	5e 81       	ldd	r21, Y+6	; 0x06
    1b50:	41 30       	cpi	r20, 0x01	; 1
    1b52:	51 05       	cpc	r21, r1
    1b54:	c1 f1       	breq	.+112    	; 0x1bc6 <MDIO_voidGetPinValue+0x9a>
    1b56:	8d 81       	ldd	r24, Y+5	; 0x05
    1b58:	9e 81       	ldd	r25, Y+6	; 0x06
    1b5a:	82 30       	cpi	r24, 0x02	; 2
    1b5c:	91 05       	cpc	r25, r1
    1b5e:	34 f4       	brge	.+12     	; 0x1b6c <MDIO_voidGetPinValue+0x40>
    1b60:	2d 81       	ldd	r18, Y+5	; 0x05
    1b62:	3e 81       	ldd	r19, Y+6	; 0x06
    1b64:	21 15       	cp	r18, r1
    1b66:	31 05       	cpc	r19, r1
    1b68:	71 f0       	breq	.+28     	; 0x1b86 <MDIO_voidGetPinValue+0x5a>
    1b6a:	8c c0       	rjmp	.+280    	; 0x1c84 <MDIO_voidGetPinValue+0x158>
    1b6c:	4d 81       	ldd	r20, Y+5	; 0x05
    1b6e:	5e 81       	ldd	r21, Y+6	; 0x06
    1b70:	42 30       	cpi	r20, 0x02	; 2
    1b72:	51 05       	cpc	r21, r1
    1b74:	09 f4       	brne	.+2      	; 0x1b78 <MDIO_voidGetPinValue+0x4c>
    1b76:	47 c0       	rjmp	.+142    	; 0x1c06 <MDIO_voidGetPinValue+0xda>
    1b78:	8d 81       	ldd	r24, Y+5	; 0x05
    1b7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b7c:	83 30       	cpi	r24, 0x03	; 3
    1b7e:	91 05       	cpc	r25, r1
    1b80:	09 f4       	brne	.+2      	; 0x1b84 <MDIO_voidGetPinValue+0x58>
    1b82:	61 c0       	rjmp	.+194    	; 0x1c46 <MDIO_voidGetPinValue+0x11a>
    1b84:	7f c0       	rjmp	.+254    	; 0x1c84 <MDIO_voidGetPinValue+0x158>
			{
			case DIO_PORTA: *A_PtrData=GET_BIT(DIO_PINA,A_u8PinNo); break;
    1b86:	e9 e3       	ldi	r30, 0x39	; 57
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	80 81       	ld	r24, Z
    1b8c:	48 2f       	mov	r20, r24
    1b8e:	50 e0       	ldi	r21, 0x00	; 0
    1b90:	8a 81       	ldd	r24, Y+2	; 0x02
    1b92:	28 2f       	mov	r18, r24
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	02 c0       	rjmp	.+4      	; 0x1ba0 <MDIO_voidGetPinValue+0x74>
    1b9c:	88 0f       	add	r24, r24
    1b9e:	99 1f       	adc	r25, r25
    1ba0:	2a 95       	dec	r18
    1ba2:	e2 f7       	brpl	.-8      	; 0x1b9c <MDIO_voidGetPinValue+0x70>
    1ba4:	9a 01       	movw	r18, r20
    1ba6:	28 23       	and	r18, r24
    1ba8:	39 23       	and	r19, r25
    1baa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bac:	88 2f       	mov	r24, r24
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	a9 01       	movw	r20, r18
    1bb2:	02 c0       	rjmp	.+4      	; 0x1bb8 <MDIO_voidGetPinValue+0x8c>
    1bb4:	55 95       	asr	r21
    1bb6:	47 95       	ror	r20
    1bb8:	8a 95       	dec	r24
    1bba:	e2 f7       	brpl	.-8      	; 0x1bb4 <MDIO_voidGetPinValue+0x88>
    1bbc:	ca 01       	movw	r24, r20
    1bbe:	eb 81       	ldd	r30, Y+3	; 0x03
    1bc0:	fc 81       	ldd	r31, Y+4	; 0x04
    1bc2:	80 83       	st	Z, r24
    1bc4:	5f c0       	rjmp	.+190    	; 0x1c84 <MDIO_voidGetPinValue+0x158>
			case DIO_PORTB: *A_PtrData=GET_BIT(DIO_PINB,A_u8PinNo); break;
    1bc6:	e6 e3       	ldi	r30, 0x36	; 54
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	80 81       	ld	r24, Z
    1bcc:	48 2f       	mov	r20, r24
    1bce:	50 e0       	ldi	r21, 0x00	; 0
    1bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd2:	28 2f       	mov	r18, r24
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	81 e0       	ldi	r24, 0x01	; 1
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	02 c0       	rjmp	.+4      	; 0x1be0 <MDIO_voidGetPinValue+0xb4>
    1bdc:	88 0f       	add	r24, r24
    1bde:	99 1f       	adc	r25, r25
    1be0:	2a 95       	dec	r18
    1be2:	e2 f7       	brpl	.-8      	; 0x1bdc <MDIO_voidGetPinValue+0xb0>
    1be4:	9a 01       	movw	r18, r20
    1be6:	28 23       	and	r18, r24
    1be8:	39 23       	and	r19, r25
    1bea:	8a 81       	ldd	r24, Y+2	; 0x02
    1bec:	88 2f       	mov	r24, r24
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	a9 01       	movw	r20, r18
    1bf2:	02 c0       	rjmp	.+4      	; 0x1bf8 <MDIO_voidGetPinValue+0xcc>
    1bf4:	55 95       	asr	r21
    1bf6:	47 95       	ror	r20
    1bf8:	8a 95       	dec	r24
    1bfa:	e2 f7       	brpl	.-8      	; 0x1bf4 <MDIO_voidGetPinValue+0xc8>
    1bfc:	ca 01       	movw	r24, r20
    1bfe:	eb 81       	ldd	r30, Y+3	; 0x03
    1c00:	fc 81       	ldd	r31, Y+4	; 0x04
    1c02:	80 83       	st	Z, r24
    1c04:	3f c0       	rjmp	.+126    	; 0x1c84 <MDIO_voidGetPinValue+0x158>
			case DIO_PORTC: *A_PtrData=GET_BIT(DIO_PINC,A_u8PinNo); break;
    1c06:	e3 e3       	ldi	r30, 0x33	; 51
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	80 81       	ld	r24, Z
    1c0c:	48 2f       	mov	r20, r24
    1c0e:	50 e0       	ldi	r21, 0x00	; 0
    1c10:	8a 81       	ldd	r24, Y+2	; 0x02
    1c12:	28 2f       	mov	r18, r24
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	02 c0       	rjmp	.+4      	; 0x1c20 <MDIO_voidGetPinValue+0xf4>
    1c1c:	88 0f       	add	r24, r24
    1c1e:	99 1f       	adc	r25, r25
    1c20:	2a 95       	dec	r18
    1c22:	e2 f7       	brpl	.-8      	; 0x1c1c <MDIO_voidGetPinValue+0xf0>
    1c24:	9a 01       	movw	r18, r20
    1c26:	28 23       	and	r18, r24
    1c28:	39 23       	and	r19, r25
    1c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2c:	88 2f       	mov	r24, r24
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	a9 01       	movw	r20, r18
    1c32:	02 c0       	rjmp	.+4      	; 0x1c38 <MDIO_voidGetPinValue+0x10c>
    1c34:	55 95       	asr	r21
    1c36:	47 95       	ror	r20
    1c38:	8a 95       	dec	r24
    1c3a:	e2 f7       	brpl	.-8      	; 0x1c34 <MDIO_voidGetPinValue+0x108>
    1c3c:	ca 01       	movw	r24, r20
    1c3e:	eb 81       	ldd	r30, Y+3	; 0x03
    1c40:	fc 81       	ldd	r31, Y+4	; 0x04
    1c42:	80 83       	st	Z, r24
    1c44:	1f c0       	rjmp	.+62     	; 0x1c84 <MDIO_voidGetPinValue+0x158>
			case DIO_PORTD: *A_PtrData=GET_BIT(DIO_PIND,A_u8PinNo); break;
    1c46:	e0 e3       	ldi	r30, 0x30	; 48
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	48 2f       	mov	r20, r24
    1c4e:	50 e0       	ldi	r21, 0x00	; 0
    1c50:	8a 81       	ldd	r24, Y+2	; 0x02
    1c52:	28 2f       	mov	r18, r24
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	02 c0       	rjmp	.+4      	; 0x1c60 <MDIO_voidGetPinValue+0x134>
    1c5c:	88 0f       	add	r24, r24
    1c5e:	99 1f       	adc	r25, r25
    1c60:	2a 95       	dec	r18
    1c62:	e2 f7       	brpl	.-8      	; 0x1c5c <MDIO_voidGetPinValue+0x130>
    1c64:	9a 01       	movw	r18, r20
    1c66:	28 23       	and	r18, r24
    1c68:	39 23       	and	r19, r25
    1c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6c:	88 2f       	mov	r24, r24
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	a9 01       	movw	r20, r18
    1c72:	02 c0       	rjmp	.+4      	; 0x1c78 <MDIO_voidGetPinValue+0x14c>
    1c74:	55 95       	asr	r21
    1c76:	47 95       	ror	r20
    1c78:	8a 95       	dec	r24
    1c7a:	e2 f7       	brpl	.-8      	; 0x1c74 <MDIO_voidGetPinValue+0x148>
    1c7c:	ca 01       	movw	r24, r20
    1c7e:	eb 81       	ldd	r30, Y+3	; 0x03
    1c80:	fc 81       	ldd	r31, Y+4	; 0x04
    1c82:	80 83       	st	Z, r24
			}
}
    1c84:	26 96       	adiw	r28, 0x06	; 6
    1c86:	0f b6       	in	r0, 0x3f	; 63
    1c88:	f8 94       	cli
    1c8a:	de bf       	out	0x3e, r29	; 62
    1c8c:	0f be       	out	0x3f, r0	; 63
    1c8e:	cd bf       	out	0x3d, r28	; 61
    1c90:	cf 91       	pop	r28
    1c92:	df 91       	pop	r29
    1c94:	08 95       	ret

00001c96 <MDIO_voidTogglePinValue>:

void MDIO_voidTogglePinValue (u8 A_u8PortNo , u8 A_u8PinNo)
{
    1c96:	df 93       	push	r29
    1c98:	cf 93       	push	r28
    1c9a:	00 d0       	rcall	.+0      	; 0x1c9c <MDIO_voidTogglePinValue+0x6>
    1c9c:	00 d0       	rcall	.+0      	; 0x1c9e <MDIO_voidTogglePinValue+0x8>
    1c9e:	cd b7       	in	r28, 0x3d	; 61
    1ca0:	de b7       	in	r29, 0x3e	; 62
    1ca2:	89 83       	std	Y+1, r24	; 0x01
    1ca4:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortNo)
    1ca6:	89 81       	ldd	r24, Y+1	; 0x01
    1ca8:	28 2f       	mov	r18, r24
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	3c 83       	std	Y+4, r19	; 0x04
    1cae:	2b 83       	std	Y+3, r18	; 0x03
    1cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb4:	81 30       	cpi	r24, 0x01	; 1
    1cb6:	91 05       	cpc	r25, r1
    1cb8:	49 f1       	breq	.+82     	; 0x1d0c <MDIO_voidTogglePinValue+0x76>
    1cba:	2b 81       	ldd	r18, Y+3	; 0x03
    1cbc:	3c 81       	ldd	r19, Y+4	; 0x04
    1cbe:	22 30       	cpi	r18, 0x02	; 2
    1cc0:	31 05       	cpc	r19, r1
    1cc2:	2c f4       	brge	.+10     	; 0x1cce <MDIO_voidTogglePinValue+0x38>
    1cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc8:	00 97       	sbiw	r24, 0x00	; 0
    1cca:	61 f0       	breq	.+24     	; 0x1ce4 <MDIO_voidTogglePinValue+0x4e>
    1ccc:	5a c0       	rjmp	.+180    	; 0x1d82 <MDIO_voidTogglePinValue+0xec>
    1cce:	2b 81       	ldd	r18, Y+3	; 0x03
    1cd0:	3c 81       	ldd	r19, Y+4	; 0x04
    1cd2:	22 30       	cpi	r18, 0x02	; 2
    1cd4:	31 05       	cpc	r19, r1
    1cd6:	71 f1       	breq	.+92     	; 0x1d34 <MDIO_voidTogglePinValue+0x9e>
    1cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cda:	9c 81       	ldd	r25, Y+4	; 0x04
    1cdc:	83 30       	cpi	r24, 0x03	; 3
    1cde:	91 05       	cpc	r25, r1
    1ce0:	e9 f1       	breq	.+122    	; 0x1d5c <MDIO_voidTogglePinValue+0xc6>
    1ce2:	4f c0       	rjmp	.+158    	; 0x1d82 <MDIO_voidTogglePinValue+0xec>
			{
			case DIO_PORTA: TOG_BIT(PORTA,A_u8PinNo); break;
    1ce4:	ab e3       	ldi	r26, 0x3B	; 59
    1ce6:	b0 e0       	ldi	r27, 0x00	; 0
    1ce8:	eb e3       	ldi	r30, 0x3B	; 59
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	80 81       	ld	r24, Z
    1cee:	48 2f       	mov	r20, r24
    1cf0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf2:	28 2f       	mov	r18, r24
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	02 2e       	mov	r0, r18
    1cfc:	02 c0       	rjmp	.+4      	; 0x1d02 <MDIO_voidTogglePinValue+0x6c>
    1cfe:	88 0f       	add	r24, r24
    1d00:	99 1f       	adc	r25, r25
    1d02:	0a 94       	dec	r0
    1d04:	e2 f7       	brpl	.-8      	; 0x1cfe <MDIO_voidTogglePinValue+0x68>
    1d06:	84 27       	eor	r24, r20
    1d08:	8c 93       	st	X, r24
    1d0a:	3b c0       	rjmp	.+118    	; 0x1d82 <MDIO_voidTogglePinValue+0xec>
			case DIO_PORTB: TOG_BIT(PORTB,A_u8PinNo); break;
    1d0c:	a8 e3       	ldi	r26, 0x38	; 56
    1d0e:	b0 e0       	ldi	r27, 0x00	; 0
    1d10:	e8 e3       	ldi	r30, 0x38	; 56
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	80 81       	ld	r24, Z
    1d16:	48 2f       	mov	r20, r24
    1d18:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1a:	28 2f       	mov	r18, r24
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	02 2e       	mov	r0, r18
    1d24:	02 c0       	rjmp	.+4      	; 0x1d2a <MDIO_voidTogglePinValue+0x94>
    1d26:	88 0f       	add	r24, r24
    1d28:	99 1f       	adc	r25, r25
    1d2a:	0a 94       	dec	r0
    1d2c:	e2 f7       	brpl	.-8      	; 0x1d26 <MDIO_voidTogglePinValue+0x90>
    1d2e:	84 27       	eor	r24, r20
    1d30:	8c 93       	st	X, r24
    1d32:	27 c0       	rjmp	.+78     	; 0x1d82 <MDIO_voidTogglePinValue+0xec>
			case DIO_PORTC: TOG_BIT(PORTC,A_u8PinNo); break;
    1d34:	a5 e3       	ldi	r26, 0x35	; 53
    1d36:	b0 e0       	ldi	r27, 0x00	; 0
    1d38:	e5 e3       	ldi	r30, 0x35	; 53
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	80 81       	ld	r24, Z
    1d3e:	48 2f       	mov	r20, r24
    1d40:	8a 81       	ldd	r24, Y+2	; 0x02
    1d42:	28 2f       	mov	r18, r24
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	02 2e       	mov	r0, r18
    1d4c:	02 c0       	rjmp	.+4      	; 0x1d52 <MDIO_voidTogglePinValue+0xbc>
    1d4e:	88 0f       	add	r24, r24
    1d50:	99 1f       	adc	r25, r25
    1d52:	0a 94       	dec	r0
    1d54:	e2 f7       	brpl	.-8      	; 0x1d4e <MDIO_voidTogglePinValue+0xb8>
    1d56:	84 27       	eor	r24, r20
    1d58:	8c 93       	st	X, r24
    1d5a:	13 c0       	rjmp	.+38     	; 0x1d82 <MDIO_voidTogglePinValue+0xec>
			case DIO_PORTD: TOG_BIT(PORTD,A_u8PinNo); break;
    1d5c:	a2 e3       	ldi	r26, 0x32	; 50
    1d5e:	b0 e0       	ldi	r27, 0x00	; 0
    1d60:	e2 e3       	ldi	r30, 0x32	; 50
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	80 81       	ld	r24, Z
    1d66:	48 2f       	mov	r20, r24
    1d68:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6a:	28 2f       	mov	r18, r24
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	02 2e       	mov	r0, r18
    1d74:	02 c0       	rjmp	.+4      	; 0x1d7a <MDIO_voidTogglePinValue+0xe4>
    1d76:	88 0f       	add	r24, r24
    1d78:	99 1f       	adc	r25, r25
    1d7a:	0a 94       	dec	r0
    1d7c:	e2 f7       	brpl	.-8      	; 0x1d76 <MDIO_voidTogglePinValue+0xe0>
    1d7e:	84 27       	eor	r24, r20
    1d80:	8c 93       	st	X, r24
			}
}
    1d82:	0f 90       	pop	r0
    1d84:	0f 90       	pop	r0
    1d86:	0f 90       	pop	r0
    1d88:	0f 90       	pop	r0
    1d8a:	cf 91       	pop	r28
    1d8c:	df 91       	pop	r29
    1d8e:	08 95       	ret

00001d90 <MDIO_voidSetPortDirection>:


void MDIO_voidSetPortDirection (u8 A_u8PortNo , u8 A_u8PinDirection)
{
    1d90:	df 93       	push	r29
    1d92:	cf 93       	push	r28
    1d94:	00 d0       	rcall	.+0      	; 0x1d96 <MDIO_voidSetPortDirection+0x6>
    1d96:	00 d0       	rcall	.+0      	; 0x1d98 <MDIO_voidSetPortDirection+0x8>
    1d98:	cd b7       	in	r28, 0x3d	; 61
    1d9a:	de b7       	in	r29, 0x3e	; 62
    1d9c:	89 83       	std	Y+1, r24	; 0x01
    1d9e:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortNo)
    1da0:	89 81       	ldd	r24, Y+1	; 0x01
    1da2:	28 2f       	mov	r18, r24
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	3c 83       	std	Y+4, r19	; 0x04
    1da8:	2b 83       	std	Y+3, r18	; 0x03
    1daa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dac:	9c 81       	ldd	r25, Y+4	; 0x04
    1dae:	81 30       	cpi	r24, 0x01	; 1
    1db0:	91 05       	cpc	r25, r1
    1db2:	d1 f0       	breq	.+52     	; 0x1de8 <MDIO_voidSetPortDirection+0x58>
    1db4:	2b 81       	ldd	r18, Y+3	; 0x03
    1db6:	3c 81       	ldd	r19, Y+4	; 0x04
    1db8:	22 30       	cpi	r18, 0x02	; 2
    1dba:	31 05       	cpc	r19, r1
    1dbc:	2c f4       	brge	.+10     	; 0x1dc8 <MDIO_voidSetPortDirection+0x38>
    1dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc2:	00 97       	sbiw	r24, 0x00	; 0
    1dc4:	61 f0       	breq	.+24     	; 0x1dde <MDIO_voidSetPortDirection+0x4e>
    1dc6:	1e c0       	rjmp	.+60     	; 0x1e04 <MDIO_voidSetPortDirection+0x74>
    1dc8:	2b 81       	ldd	r18, Y+3	; 0x03
    1dca:	3c 81       	ldd	r19, Y+4	; 0x04
    1dcc:	22 30       	cpi	r18, 0x02	; 2
    1dce:	31 05       	cpc	r19, r1
    1dd0:	81 f0       	breq	.+32     	; 0x1df2 <MDIO_voidSetPortDirection+0x62>
    1dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd4:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd6:	83 30       	cpi	r24, 0x03	; 3
    1dd8:	91 05       	cpc	r25, r1
    1dda:	81 f0       	breq	.+32     	; 0x1dfc <MDIO_voidSetPortDirection+0x6c>
    1ddc:	13 c0       	rjmp	.+38     	; 0x1e04 <MDIO_voidSetPortDirection+0x74>
			{
			case DIO_PORTA: DDRA_Register= A_u8PinDirection; break;
    1dde:	ea e3       	ldi	r30, 0x3A	; 58
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	8a 81       	ldd	r24, Y+2	; 0x02
    1de4:	80 83       	st	Z, r24
    1de6:	0e c0       	rjmp	.+28     	; 0x1e04 <MDIO_voidSetPortDirection+0x74>
			case DIO_PORTB: DDRB_Register= A_u8PinDirection; break;
    1de8:	e7 e3       	ldi	r30, 0x37	; 55
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	8a 81       	ldd	r24, Y+2	; 0x02
    1dee:	80 83       	st	Z, r24
    1df0:	09 c0       	rjmp	.+18     	; 0x1e04 <MDIO_voidSetPortDirection+0x74>
			case DIO_PORTC: DDRC_Register= A_u8PinDirection; break;
    1df2:	e4 e3       	ldi	r30, 0x34	; 52
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	8a 81       	ldd	r24, Y+2	; 0x02
    1df8:	80 83       	st	Z, r24
    1dfa:	04 c0       	rjmp	.+8      	; 0x1e04 <MDIO_voidSetPortDirection+0x74>
			case DIO_PORTD: DDRD_Register= A_u8PinDirection; break;
    1dfc:	e1 e3       	ldi	r30, 0x31	; 49
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	8a 81       	ldd	r24, Y+2	; 0x02
    1e02:	80 83       	st	Z, r24
			}
}
    1e04:	0f 90       	pop	r0
    1e06:	0f 90       	pop	r0
    1e08:	0f 90       	pop	r0
    1e0a:	0f 90       	pop	r0
    1e0c:	cf 91       	pop	r28
    1e0e:	df 91       	pop	r29
    1e10:	08 95       	ret

00001e12 <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue   (u8 A_u8PortNo  , u8 A_u8Value)
{
    1e12:	df 93       	push	r29
    1e14:	cf 93       	push	r28
    1e16:	00 d0       	rcall	.+0      	; 0x1e18 <MDIO_voidSetPortValue+0x6>
    1e18:	00 d0       	rcall	.+0      	; 0x1e1a <MDIO_voidSetPortValue+0x8>
    1e1a:	cd b7       	in	r28, 0x3d	; 61
    1e1c:	de b7       	in	r29, 0x3e	; 62
    1e1e:	89 83       	std	Y+1, r24	; 0x01
    1e20:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortNo)
    1e22:	89 81       	ldd	r24, Y+1	; 0x01
    1e24:	28 2f       	mov	r18, r24
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	3c 83       	std	Y+4, r19	; 0x04
    1e2a:	2b 83       	std	Y+3, r18	; 0x03
    1e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e30:	81 30       	cpi	r24, 0x01	; 1
    1e32:	91 05       	cpc	r25, r1
    1e34:	d1 f0       	breq	.+52     	; 0x1e6a <MDIO_voidSetPortValue+0x58>
    1e36:	2b 81       	ldd	r18, Y+3	; 0x03
    1e38:	3c 81       	ldd	r19, Y+4	; 0x04
    1e3a:	22 30       	cpi	r18, 0x02	; 2
    1e3c:	31 05       	cpc	r19, r1
    1e3e:	2c f4       	brge	.+10     	; 0x1e4a <MDIO_voidSetPortValue+0x38>
    1e40:	8b 81       	ldd	r24, Y+3	; 0x03
    1e42:	9c 81       	ldd	r25, Y+4	; 0x04
    1e44:	00 97       	sbiw	r24, 0x00	; 0
    1e46:	61 f0       	breq	.+24     	; 0x1e60 <MDIO_voidSetPortValue+0x4e>
    1e48:	1e c0       	rjmp	.+60     	; 0x1e86 <MDIO_voidSetPortValue+0x74>
    1e4a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e4c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e4e:	22 30       	cpi	r18, 0x02	; 2
    1e50:	31 05       	cpc	r19, r1
    1e52:	81 f0       	breq	.+32     	; 0x1e74 <MDIO_voidSetPortValue+0x62>
    1e54:	8b 81       	ldd	r24, Y+3	; 0x03
    1e56:	9c 81       	ldd	r25, Y+4	; 0x04
    1e58:	83 30       	cpi	r24, 0x03	; 3
    1e5a:	91 05       	cpc	r25, r1
    1e5c:	81 f0       	breq	.+32     	; 0x1e7e <MDIO_voidSetPortValue+0x6c>
    1e5e:	13 c0       	rjmp	.+38     	; 0x1e86 <MDIO_voidSetPortValue+0x74>
			{
			case DIO_PORTA: PORTA= A_u8Value; break;
    1e60:	eb e3       	ldi	r30, 0x3B	; 59
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	8a 81       	ldd	r24, Y+2	; 0x02
    1e66:	80 83       	st	Z, r24
    1e68:	0e c0       	rjmp	.+28     	; 0x1e86 <MDIO_voidSetPortValue+0x74>
			case DIO_PORTB: PORTB= A_u8Value; break;
    1e6a:	e8 e3       	ldi	r30, 0x38	; 56
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e70:	80 83       	st	Z, r24
    1e72:	09 c0       	rjmp	.+18     	; 0x1e86 <MDIO_voidSetPortValue+0x74>
			case DIO_PORTC: PORTC= A_u8Value; break;
    1e74:	e5 e3       	ldi	r30, 0x35	; 53
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7a:	80 83       	st	Z, r24
    1e7c:	04 c0       	rjmp	.+8      	; 0x1e86 <MDIO_voidSetPortValue+0x74>
			case DIO_PORTD: PORTD= A_u8Value; break;
    1e7e:	e2 e3       	ldi	r30, 0x32	; 50
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	8a 81       	ldd	r24, Y+2	; 0x02
    1e84:	80 83       	st	Z, r24
			}
}
    1e86:	0f 90       	pop	r0
    1e88:	0f 90       	pop	r0
    1e8a:	0f 90       	pop	r0
    1e8c:	0f 90       	pop	r0
    1e8e:	cf 91       	pop	r28
    1e90:	df 91       	pop	r29
    1e92:	08 95       	ret

00001e94 <MDIO_voidClrPortValue>:

void MDIO_voidClrPortValue (u8 A_u8PortNo)
{
    1e94:	df 93       	push	r29
    1e96:	cf 93       	push	r28
    1e98:	00 d0       	rcall	.+0      	; 0x1e9a <MDIO_voidClrPortValue+0x6>
    1e9a:	0f 92       	push	r0
    1e9c:	cd b7       	in	r28, 0x3d	; 61
    1e9e:	de b7       	in	r29, 0x3e	; 62
    1ea0:	89 83       	std	Y+1, r24	; 0x01
	switch (A_u8PortNo)
    1ea2:	89 81       	ldd	r24, Y+1	; 0x01
    1ea4:	28 2f       	mov	r18, r24
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	3b 83       	std	Y+3, r19	; 0x03
    1eaa:	2a 83       	std	Y+2, r18	; 0x02
    1eac:	8a 81       	ldd	r24, Y+2	; 0x02
    1eae:	9b 81       	ldd	r25, Y+3	; 0x03
    1eb0:	81 30       	cpi	r24, 0x01	; 1
    1eb2:	91 05       	cpc	r25, r1
    1eb4:	c9 f0       	breq	.+50     	; 0x1ee8 <MDIO_voidClrPortValue+0x54>
    1eb6:	2a 81       	ldd	r18, Y+2	; 0x02
    1eb8:	3b 81       	ldd	r19, Y+3	; 0x03
    1eba:	22 30       	cpi	r18, 0x02	; 2
    1ebc:	31 05       	cpc	r19, r1
    1ebe:	2c f4       	brge	.+10     	; 0x1eca <MDIO_voidClrPortValue+0x36>
    1ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec4:	00 97       	sbiw	r24, 0x00	; 0
    1ec6:	61 f0       	breq	.+24     	; 0x1ee0 <MDIO_voidClrPortValue+0x4c>
    1ec8:	1a c0       	rjmp	.+52     	; 0x1efe <MDIO_voidClrPortValue+0x6a>
    1eca:	2a 81       	ldd	r18, Y+2	; 0x02
    1ecc:	3b 81       	ldd	r19, Y+3	; 0x03
    1ece:	22 30       	cpi	r18, 0x02	; 2
    1ed0:	31 05       	cpc	r19, r1
    1ed2:	71 f0       	breq	.+28     	; 0x1ef0 <MDIO_voidClrPortValue+0x5c>
    1ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ed8:	83 30       	cpi	r24, 0x03	; 3
    1eda:	91 05       	cpc	r25, r1
    1edc:	69 f0       	breq	.+26     	; 0x1ef8 <MDIO_voidClrPortValue+0x64>
    1ede:	0f c0       	rjmp	.+30     	; 0x1efe <MDIO_voidClrPortValue+0x6a>
			{
			case DIO_PORTA: PORTA= DIO_PORT_LOW; break;
    1ee0:	eb e3       	ldi	r30, 0x3B	; 59
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	10 82       	st	Z, r1
    1ee6:	0b c0       	rjmp	.+22     	; 0x1efe <MDIO_voidClrPortValue+0x6a>
			case DIO_PORTB: PORTB= DIO_PORT_LOW; break;
    1ee8:	e8 e3       	ldi	r30, 0x38	; 56
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	10 82       	st	Z, r1
    1eee:	07 c0       	rjmp	.+14     	; 0x1efe <MDIO_voidClrPortValue+0x6a>
			case DIO_PORTC: PORTC= DIO_PORT_LOW; break;
    1ef0:	e5 e3       	ldi	r30, 0x35	; 53
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	10 82       	st	Z, r1
    1ef6:	03 c0       	rjmp	.+6      	; 0x1efe <MDIO_voidClrPortValue+0x6a>
			case DIO_PORTD: PORTD= DIO_PORT_LOW; break;
    1ef8:	e2 e3       	ldi	r30, 0x32	; 50
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	10 82       	st	Z, r1
			}
}
    1efe:	0f 90       	pop	r0
    1f00:	0f 90       	pop	r0
    1f02:	0f 90       	pop	r0
    1f04:	cf 91       	pop	r28
    1f06:	df 91       	pop	r29
    1f08:	08 95       	ret

00001f0a <MDIO_voidGetPortValue>:

void MDIO_voidGetPortValue (u8 A_u8PortNo  , u8 * A_PtrData )
{
    1f0a:	df 93       	push	r29
    1f0c:	cf 93       	push	r28
    1f0e:	00 d0       	rcall	.+0      	; 0x1f10 <MDIO_voidGetPortValue+0x6>
    1f10:	00 d0       	rcall	.+0      	; 0x1f12 <MDIO_voidGetPortValue+0x8>
    1f12:	0f 92       	push	r0
    1f14:	cd b7       	in	r28, 0x3d	; 61
    1f16:	de b7       	in	r29, 0x3e	; 62
    1f18:	89 83       	std	Y+1, r24	; 0x01
    1f1a:	7b 83       	std	Y+3, r23	; 0x03
    1f1c:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortNo)
    1f1e:	89 81       	ldd	r24, Y+1	; 0x01
    1f20:	28 2f       	mov	r18, r24
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	3d 83       	std	Y+5, r19	; 0x05
    1f26:	2c 83       	std	Y+4, r18	; 0x04
    1f28:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f2c:	81 30       	cpi	r24, 0x01	; 1
    1f2e:	91 05       	cpc	r25, r1
    1f30:	e1 f0       	breq	.+56     	; 0x1f6a <MDIO_voidGetPortValue+0x60>
    1f32:	2c 81       	ldd	r18, Y+4	; 0x04
    1f34:	3d 81       	ldd	r19, Y+5	; 0x05
    1f36:	22 30       	cpi	r18, 0x02	; 2
    1f38:	31 05       	cpc	r19, r1
    1f3a:	2c f4       	brge	.+10     	; 0x1f46 <MDIO_voidGetPortValue+0x3c>
    1f3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f3e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f40:	00 97       	sbiw	r24, 0x00	; 0
    1f42:	61 f0       	breq	.+24     	; 0x1f5c <MDIO_voidGetPortValue+0x52>
    1f44:	26 c0       	rjmp	.+76     	; 0x1f92 <MDIO_voidGetPortValue+0x88>
    1f46:	2c 81       	ldd	r18, Y+4	; 0x04
    1f48:	3d 81       	ldd	r19, Y+5	; 0x05
    1f4a:	22 30       	cpi	r18, 0x02	; 2
    1f4c:	31 05       	cpc	r19, r1
    1f4e:	a1 f0       	breq	.+40     	; 0x1f78 <MDIO_voidGetPortValue+0x6e>
    1f50:	8c 81       	ldd	r24, Y+4	; 0x04
    1f52:	9d 81       	ldd	r25, Y+5	; 0x05
    1f54:	83 30       	cpi	r24, 0x03	; 3
    1f56:	91 05       	cpc	r25, r1
    1f58:	b1 f0       	breq	.+44     	; 0x1f86 <MDIO_voidGetPortValue+0x7c>
    1f5a:	1b c0       	rjmp	.+54     	; 0x1f92 <MDIO_voidGetPortValue+0x88>
			{
			case DIO_PORTA: *A_PtrData= DIO_PINA; break;
    1f5c:	e9 e3       	ldi	r30, 0x39	; 57
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	80 81       	ld	r24, Z
    1f62:	ea 81       	ldd	r30, Y+2	; 0x02
    1f64:	fb 81       	ldd	r31, Y+3	; 0x03
    1f66:	80 83       	st	Z, r24
    1f68:	14 c0       	rjmp	.+40     	; 0x1f92 <MDIO_voidGetPortValue+0x88>
			case DIO_PORTB: *A_PtrData= DIO_PINB; break;
    1f6a:	e6 e3       	ldi	r30, 0x36	; 54
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	80 81       	ld	r24, Z
    1f70:	ea 81       	ldd	r30, Y+2	; 0x02
    1f72:	fb 81       	ldd	r31, Y+3	; 0x03
    1f74:	80 83       	st	Z, r24
    1f76:	0d c0       	rjmp	.+26     	; 0x1f92 <MDIO_voidGetPortValue+0x88>
			case DIO_PORTC: *A_PtrData= DIO_PINC; break;
    1f78:	e3 e3       	ldi	r30, 0x33	; 51
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	80 81       	ld	r24, Z
    1f7e:	ea 81       	ldd	r30, Y+2	; 0x02
    1f80:	fb 81       	ldd	r31, Y+3	; 0x03
    1f82:	80 83       	st	Z, r24
    1f84:	06 c0       	rjmp	.+12     	; 0x1f92 <MDIO_voidGetPortValue+0x88>
			case DIO_PORTD: *A_PtrData= DIO_PIND; break;
    1f86:	e0 e3       	ldi	r30, 0x30	; 48
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	80 81       	ld	r24, Z
    1f8c:	ea 81       	ldd	r30, Y+2	; 0x02
    1f8e:	fb 81       	ldd	r31, Y+3	; 0x03
    1f90:	80 83       	st	Z, r24
			}
}
    1f92:	0f 90       	pop	r0
    1f94:	0f 90       	pop	r0
    1f96:	0f 90       	pop	r0
    1f98:	0f 90       	pop	r0
    1f9a:	0f 90       	pop	r0
    1f9c:	cf 91       	pop	r28
    1f9e:	df 91       	pop	r29
    1fa0:	08 95       	ret

00001fa2 <MDIO_voidTogglePortValue>:

void MDIO_voidTogglePortValue (u8 A_u8PortNo)
{
    1fa2:	df 93       	push	r29
    1fa4:	cf 93       	push	r28
    1fa6:	00 d0       	rcall	.+0      	; 0x1fa8 <MDIO_voidTogglePortValue+0x6>
    1fa8:	0f 92       	push	r0
    1faa:	cd b7       	in	r28, 0x3d	; 61
    1fac:	de b7       	in	r29, 0x3e	; 62
    1fae:	89 83       	std	Y+1, r24	; 0x01
		switch (A_u8PortNo)
    1fb0:	89 81       	ldd	r24, Y+1	; 0x01
    1fb2:	28 2f       	mov	r18, r24
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	3b 83       	std	Y+3, r19	; 0x03
    1fb8:	2a 83       	std	Y+2, r18	; 0x02
    1fba:	8a 81       	ldd	r24, Y+2	; 0x02
    1fbc:	9b 81       	ldd	r25, Y+3	; 0x03
    1fbe:	81 30       	cpi	r24, 0x01	; 1
    1fc0:	91 05       	cpc	r25, r1
    1fc2:	e9 f0       	breq	.+58     	; 0x1ffe <MDIO_voidTogglePortValue+0x5c>
    1fc4:	2a 81       	ldd	r18, Y+2	; 0x02
    1fc6:	3b 81       	ldd	r19, Y+3	; 0x03
    1fc8:	22 30       	cpi	r18, 0x02	; 2
    1fca:	31 05       	cpc	r19, r1
    1fcc:	2c f4       	brge	.+10     	; 0x1fd8 <MDIO_voidTogglePortValue+0x36>
    1fce:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd0:	9b 81       	ldd	r25, Y+3	; 0x03
    1fd2:	00 97       	sbiw	r24, 0x00	; 0
    1fd4:	61 f0       	breq	.+24     	; 0x1fee <MDIO_voidTogglePortValue+0x4c>
    1fd6:	2a c0       	rjmp	.+84     	; 0x202c <MDIO_voidTogglePortValue+0x8a>
    1fd8:	2a 81       	ldd	r18, Y+2	; 0x02
    1fda:	3b 81       	ldd	r19, Y+3	; 0x03
    1fdc:	22 30       	cpi	r18, 0x02	; 2
    1fde:	31 05       	cpc	r19, r1
    1fe0:	b1 f0       	breq	.+44     	; 0x200e <MDIO_voidTogglePortValue+0x6c>
    1fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe4:	9b 81       	ldd	r25, Y+3	; 0x03
    1fe6:	83 30       	cpi	r24, 0x03	; 3
    1fe8:	91 05       	cpc	r25, r1
    1fea:	c9 f0       	breq	.+50     	; 0x201e <MDIO_voidTogglePortValue+0x7c>
    1fec:	1f c0       	rjmp	.+62     	; 0x202c <MDIO_voidTogglePortValue+0x8a>
			{
			case DIO_PORTA: PORTA =~ PORTA; break;
    1fee:	ab e3       	ldi	r26, 0x3B	; 59
    1ff0:	b0 e0       	ldi	r27, 0x00	; 0
    1ff2:	eb e3       	ldi	r30, 0x3B	; 59
    1ff4:	f0 e0       	ldi	r31, 0x00	; 0
    1ff6:	80 81       	ld	r24, Z
    1ff8:	80 95       	com	r24
    1ffa:	8c 93       	st	X, r24
    1ffc:	17 c0       	rjmp	.+46     	; 0x202c <MDIO_voidTogglePortValue+0x8a>
			case DIO_PORTB: PORTB =~ PORTB; break;
    1ffe:	a8 e3       	ldi	r26, 0x38	; 56
    2000:	b0 e0       	ldi	r27, 0x00	; 0
    2002:	e8 e3       	ldi	r30, 0x38	; 56
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 81       	ld	r24, Z
    2008:	80 95       	com	r24
    200a:	8c 93       	st	X, r24
    200c:	0f c0       	rjmp	.+30     	; 0x202c <MDIO_voidTogglePortValue+0x8a>
			case DIO_PORTC: PORTC =~ PORTC; break;
    200e:	a5 e3       	ldi	r26, 0x35	; 53
    2010:	b0 e0       	ldi	r27, 0x00	; 0
    2012:	e5 e3       	ldi	r30, 0x35	; 53
    2014:	f0 e0       	ldi	r31, 0x00	; 0
    2016:	80 81       	ld	r24, Z
    2018:	80 95       	com	r24
    201a:	8c 93       	st	X, r24
    201c:	07 c0       	rjmp	.+14     	; 0x202c <MDIO_voidTogglePortValue+0x8a>
			case DIO_PORTD: PORTD =~ PORTD; break;
    201e:	a2 e3       	ldi	r26, 0x32	; 50
    2020:	b0 e0       	ldi	r27, 0x00	; 0
    2022:	e2 e3       	ldi	r30, 0x32	; 50
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	80 81       	ld	r24, Z
    2028:	80 95       	com	r24
    202a:	8c 93       	st	X, r24
			}
}
    202c:	0f 90       	pop	r0
    202e:	0f 90       	pop	r0
    2030:	0f 90       	pop	r0
    2032:	cf 91       	pop	r28
    2034:	df 91       	pop	r29
    2036:	08 95       	ret

00002038 <MDIO_voidWriteHighNibbles>:



void MDIO_voidWriteHighNibbles ( u8 A_u8PORT , u8 A_u8value  )
{
    2038:	df 93       	push	r29
    203a:	cf 93       	push	r28
    203c:	00 d0       	rcall	.+0      	; 0x203e <MDIO_voidWriteHighNibbles+0x6>
    203e:	00 d0       	rcall	.+0      	; 0x2040 <MDIO_voidWriteHighNibbles+0x8>
    2040:	cd b7       	in	r28, 0x3d	; 61
    2042:	de b7       	in	r29, 0x3e	; 62
    2044:	89 83       	std	Y+1, r24	; 0x01
    2046:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PORT)
    2048:	89 81       	ldd	r24, Y+1	; 0x01
    204a:	28 2f       	mov	r18, r24
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	3c 83       	std	Y+4, r19	; 0x04
    2050:	2b 83       	std	Y+3, r18	; 0x03
    2052:	8b 81       	ldd	r24, Y+3	; 0x03
    2054:	9c 81       	ldd	r25, Y+4	; 0x04
    2056:	81 30       	cpi	r24, 0x01	; 1
    2058:	91 05       	cpc	r25, r1
    205a:	29 f1       	breq	.+74     	; 0x20a6 <MDIO_voidWriteHighNibbles+0x6e>
    205c:	2b 81       	ldd	r18, Y+3	; 0x03
    205e:	3c 81       	ldd	r19, Y+4	; 0x04
    2060:	22 30       	cpi	r18, 0x02	; 2
    2062:	31 05       	cpc	r19, r1
    2064:	2c f4       	brge	.+10     	; 0x2070 <MDIO_voidWriteHighNibbles+0x38>
    2066:	8b 81       	ldd	r24, Y+3	; 0x03
    2068:	9c 81       	ldd	r25, Y+4	; 0x04
    206a:	00 97       	sbiw	r24, 0x00	; 0
    206c:	61 f0       	breq	.+24     	; 0x2086 <MDIO_voidWriteHighNibbles+0x4e>
    206e:	4a c0       	rjmp	.+148    	; 0x2104 <MDIO_voidWriteHighNibbles+0xcc>
    2070:	2b 81       	ldd	r18, Y+3	; 0x03
    2072:	3c 81       	ldd	r19, Y+4	; 0x04
    2074:	22 30       	cpi	r18, 0x02	; 2
    2076:	31 05       	cpc	r19, r1
    2078:	31 f1       	breq	.+76     	; 0x20c6 <MDIO_voidWriteHighNibbles+0x8e>
    207a:	8b 81       	ldd	r24, Y+3	; 0x03
    207c:	9c 81       	ldd	r25, Y+4	; 0x04
    207e:	83 30       	cpi	r24, 0x03	; 3
    2080:	91 05       	cpc	r25, r1
    2082:	89 f1       	breq	.+98     	; 0x20e6 <MDIO_voidWriteHighNibbles+0xae>
    2084:	3f c0       	rjmp	.+126    	; 0x2104 <MDIO_voidWriteHighNibbles+0xcc>
		{
		case DIO_PORTA :
			PORTA&=0x0f;                   // make sure the high bits = 0000
    2086:	ab e3       	ldi	r26, 0x3B	; 59
    2088:	b0 e0       	ldi	r27, 0x00	; 0
    208a:	eb e3       	ldi	r30, 0x3B	; 59
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	80 81       	ld	r24, Z
    2090:	8f 70       	andi	r24, 0x0F	; 15
    2092:	8c 93       	st	X, r24
			PORTA|=A_u8value;			//Set only the high nibble of the port A by the given value
    2094:	ab e3       	ldi	r26, 0x3B	; 59
    2096:	b0 e0       	ldi	r27, 0x00	; 0
    2098:	eb e3       	ldi	r30, 0x3B	; 59
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	90 81       	ld	r25, Z
    209e:	8a 81       	ldd	r24, Y+2	; 0x02
    20a0:	89 2b       	or	r24, r25
    20a2:	8c 93       	st	X, r24
    20a4:	2f c0       	rjmp	.+94     	; 0x2104 <MDIO_voidWriteHighNibbles+0xcc>
			break ;
		case DIO_PORTB:
			PORTB&=0x0f;                 //Set only the high nibble of the port B by the given value
    20a6:	a8 e3       	ldi	r26, 0x38	; 56
    20a8:	b0 e0       	ldi	r27, 0x00	; 0
    20aa:	e8 e3       	ldi	r30, 0x38	; 56
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	80 81       	ld	r24, Z
    20b0:	8f 70       	andi	r24, 0x0F	; 15
    20b2:	8c 93       	st	X, r24
			PORTB|=A_u8value;
    20b4:	a8 e3       	ldi	r26, 0x38	; 56
    20b6:	b0 e0       	ldi	r27, 0x00	; 0
    20b8:	e8 e3       	ldi	r30, 0x38	; 56
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	90 81       	ld	r25, Z
    20be:	8a 81       	ldd	r24, Y+2	; 0x02
    20c0:	89 2b       	or	r24, r25
    20c2:	8c 93       	st	X, r24
    20c4:	1f c0       	rjmp	.+62     	; 0x2104 <MDIO_voidWriteHighNibbles+0xcc>
			break ;
		case DIO_PORTC :
			PORTC&=0x0f;                 //Set only the high nibble of the port C by the given value
    20c6:	a5 e3       	ldi	r26, 0x35	; 53
    20c8:	b0 e0       	ldi	r27, 0x00	; 0
    20ca:	e5 e3       	ldi	r30, 0x35	; 53
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	80 81       	ld	r24, Z
    20d0:	8f 70       	andi	r24, 0x0F	; 15
    20d2:	8c 93       	st	X, r24
			PORTC|=A_u8value;
    20d4:	a5 e3       	ldi	r26, 0x35	; 53
    20d6:	b0 e0       	ldi	r27, 0x00	; 0
    20d8:	e5 e3       	ldi	r30, 0x35	; 53
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	90 81       	ld	r25, Z
    20de:	8a 81       	ldd	r24, Y+2	; 0x02
    20e0:	89 2b       	or	r24, r25
    20e2:	8c 93       	st	X, r24
    20e4:	0f c0       	rjmp	.+30     	; 0x2104 <MDIO_voidWriteHighNibbles+0xcc>
			break ;
		case DIO_PORTD:
			PORTD&=0x0f;                 //Set only the high nibble of the port D by the given value
    20e6:	a2 e3       	ldi	r26, 0x32	; 50
    20e8:	b0 e0       	ldi	r27, 0x00	; 0
    20ea:	e2 e3       	ldi	r30, 0x32	; 50
    20ec:	f0 e0       	ldi	r31, 0x00	; 0
    20ee:	80 81       	ld	r24, Z
    20f0:	8f 70       	andi	r24, 0x0F	; 15
    20f2:	8c 93       	st	X, r24
			PORTD|=A_u8value;
    20f4:	a2 e3       	ldi	r26, 0x32	; 50
    20f6:	b0 e0       	ldi	r27, 0x00	; 0
    20f8:	e2 e3       	ldi	r30, 0x32	; 50
    20fa:	f0 e0       	ldi	r31, 0x00	; 0
    20fc:	90 81       	ld	r25, Z
    20fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2100:	89 2b       	or	r24, r25
    2102:	8c 93       	st	X, r24
			break ;
		}
}
    2104:	0f 90       	pop	r0
    2106:	0f 90       	pop	r0
    2108:	0f 90       	pop	r0
    210a:	0f 90       	pop	r0
    210c:	cf 91       	pop	r28
    210e:	df 91       	pop	r29
    2110:	08 95       	ret

00002112 <MDIO_voidWriteLowNibbles>:
void MDIO_voidWriteLowNibbles  ( u8 A_u8PORT , u8 A_u8value )
{
    2112:	df 93       	push	r29
    2114:	cf 93       	push	r28
    2116:	00 d0       	rcall	.+0      	; 0x2118 <MDIO_voidWriteLowNibbles+0x6>
    2118:	00 d0       	rcall	.+0      	; 0x211a <MDIO_voidWriteLowNibbles+0x8>
    211a:	cd b7       	in	r28, 0x3d	; 61
    211c:	de b7       	in	r29, 0x3e	; 62
    211e:	89 83       	std	Y+1, r24	; 0x01
    2120:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PORT)
    2122:	89 81       	ldd	r24, Y+1	; 0x01
    2124:	28 2f       	mov	r18, r24
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	3c 83       	std	Y+4, r19	; 0x04
    212a:	2b 83       	std	Y+3, r18	; 0x03
    212c:	8b 81       	ldd	r24, Y+3	; 0x03
    212e:	9c 81       	ldd	r25, Y+4	; 0x04
    2130:	81 30       	cpi	r24, 0x01	; 1
    2132:	91 05       	cpc	r25, r1
    2134:	29 f1       	breq	.+74     	; 0x2180 <MDIO_voidWriteLowNibbles+0x6e>
    2136:	2b 81       	ldd	r18, Y+3	; 0x03
    2138:	3c 81       	ldd	r19, Y+4	; 0x04
    213a:	22 30       	cpi	r18, 0x02	; 2
    213c:	31 05       	cpc	r19, r1
    213e:	2c f4       	brge	.+10     	; 0x214a <MDIO_voidWriteLowNibbles+0x38>
    2140:	8b 81       	ldd	r24, Y+3	; 0x03
    2142:	9c 81       	ldd	r25, Y+4	; 0x04
    2144:	00 97       	sbiw	r24, 0x00	; 0
    2146:	61 f0       	breq	.+24     	; 0x2160 <MDIO_voidWriteLowNibbles+0x4e>
    2148:	4a c0       	rjmp	.+148    	; 0x21de <MDIO_voidWriteLowNibbles+0xcc>
    214a:	2b 81       	ldd	r18, Y+3	; 0x03
    214c:	3c 81       	ldd	r19, Y+4	; 0x04
    214e:	22 30       	cpi	r18, 0x02	; 2
    2150:	31 05       	cpc	r19, r1
    2152:	31 f1       	breq	.+76     	; 0x21a0 <MDIO_voidWriteLowNibbles+0x8e>
    2154:	8b 81       	ldd	r24, Y+3	; 0x03
    2156:	9c 81       	ldd	r25, Y+4	; 0x04
    2158:	83 30       	cpi	r24, 0x03	; 3
    215a:	91 05       	cpc	r25, r1
    215c:	89 f1       	breq	.+98     	; 0x21c0 <MDIO_voidWriteLowNibbles+0xae>
    215e:	3f c0       	rjmp	.+126    	; 0x21de <MDIO_voidWriteLowNibbles+0xcc>
		{
		case DIO_PORTA :
			PORTA&=0xf0;                   // make sure the low bits = 0000
    2160:	ab e3       	ldi	r26, 0x3B	; 59
    2162:	b0 e0       	ldi	r27, 0x00	; 0
    2164:	eb e3       	ldi	r30, 0x3B	; 59
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	80 81       	ld	r24, Z
    216a:	80 7f       	andi	r24, 0xF0	; 240
    216c:	8c 93       	st	X, r24
			PORTA|=A_u8value;			//Set only the low nibble of the port A by the given value
    216e:	ab e3       	ldi	r26, 0x3B	; 59
    2170:	b0 e0       	ldi	r27, 0x00	; 0
    2172:	eb e3       	ldi	r30, 0x3B	; 59
    2174:	f0 e0       	ldi	r31, 0x00	; 0
    2176:	90 81       	ld	r25, Z
    2178:	8a 81       	ldd	r24, Y+2	; 0x02
    217a:	89 2b       	or	r24, r25
    217c:	8c 93       	st	X, r24
    217e:	2f c0       	rjmp	.+94     	; 0x21de <MDIO_voidWriteLowNibbles+0xcc>
			break ;
		case DIO_PORTB:
			PORTB&=0xf0;                 //Set only the low nibble of the port B by the given value
    2180:	a8 e3       	ldi	r26, 0x38	; 56
    2182:	b0 e0       	ldi	r27, 0x00	; 0
    2184:	e8 e3       	ldi	r30, 0x38	; 56
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	80 81       	ld	r24, Z
    218a:	80 7f       	andi	r24, 0xF0	; 240
    218c:	8c 93       	st	X, r24
			PORTB|=A_u8value;
    218e:	a8 e3       	ldi	r26, 0x38	; 56
    2190:	b0 e0       	ldi	r27, 0x00	; 0
    2192:	e8 e3       	ldi	r30, 0x38	; 56
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	90 81       	ld	r25, Z
    2198:	8a 81       	ldd	r24, Y+2	; 0x02
    219a:	89 2b       	or	r24, r25
    219c:	8c 93       	st	X, r24
    219e:	1f c0       	rjmp	.+62     	; 0x21de <MDIO_voidWriteLowNibbles+0xcc>
			break ;
		case DIO_PORTC :
			PORTC&=0xf0;                 //Set only the low nibble of the port C by the given value
    21a0:	a5 e3       	ldi	r26, 0x35	; 53
    21a2:	b0 e0       	ldi	r27, 0x00	; 0
    21a4:	e5 e3       	ldi	r30, 0x35	; 53
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	80 81       	ld	r24, Z
    21aa:	80 7f       	andi	r24, 0xF0	; 240
    21ac:	8c 93       	st	X, r24
			PORTC|=A_u8value;
    21ae:	a5 e3       	ldi	r26, 0x35	; 53
    21b0:	b0 e0       	ldi	r27, 0x00	; 0
    21b2:	e5 e3       	ldi	r30, 0x35	; 53
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	90 81       	ld	r25, Z
    21b8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ba:	89 2b       	or	r24, r25
    21bc:	8c 93       	st	X, r24
    21be:	0f c0       	rjmp	.+30     	; 0x21de <MDIO_voidWriteLowNibbles+0xcc>
			break ;
		case DIO_PORTD:
			PORTD&=0xf0;                 //Set only the low nibble of the port D by the given value
    21c0:	a2 e3       	ldi	r26, 0x32	; 50
    21c2:	b0 e0       	ldi	r27, 0x00	; 0
    21c4:	e2 e3       	ldi	r30, 0x32	; 50
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	80 81       	ld	r24, Z
    21ca:	80 7f       	andi	r24, 0xF0	; 240
    21cc:	8c 93       	st	X, r24
			PORTD|=A_u8value;
    21ce:	a2 e3       	ldi	r26, 0x32	; 50
    21d0:	b0 e0       	ldi	r27, 0x00	; 0
    21d2:	e2 e3       	ldi	r30, 0x32	; 50
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	90 81       	ld	r25, Z
    21d8:	8a 81       	ldd	r24, Y+2	; 0x02
    21da:	89 2b       	or	r24, r25
    21dc:	8c 93       	st	X, r24
			break ;
		}
}
    21de:	0f 90       	pop	r0
    21e0:	0f 90       	pop	r0
    21e2:	0f 90       	pop	r0
    21e4:	0f 90       	pop	r0
    21e6:	cf 91       	pop	r28
    21e8:	df 91       	pop	r29
    21ea:	08 95       	ret

000021ec <main>:

#include <avr/delay.h>

int main(void)

{
    21ec:	df 93       	push	r29
    21ee:	cf 93       	push	r28
    21f0:	00 d0       	rcall	.+0      	; 0x21f2 <main+0x6>
    21f2:	00 d0       	rcall	.+0      	; 0x21f4 <main+0x8>
    21f4:	cd b7       	in	r28, 0x3d	; 61
    21f6:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidInitialization();
    21f8:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidInitialization>
	u8 LOC_u8Iterator=0;
    21fc:	1c 82       	std	Y+4, r1	; 0x04
	u8 LOC_u8col=1;
    21fe:	81 e0       	ldi	r24, 0x01	; 1
    2200:	8b 83       	std	Y+3, r24	; 0x03
	u8 *ptr="ALIAA ESLAM ";
    2202:	80 e6       	ldi	r24, 0x60	; 96
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	9a 83       	std	Y+2, r25	; 0x02
    2208:	89 83       	std	Y+1, r24	; 0x01

	while(1)
	{
		while(ptr[LOC_u8Iterator] != '/0')
		{
			LOC_u8col++;
    220a:	8b 81       	ldd	r24, Y+3	; 0x03
    220c:	8f 5f       	subi	r24, 0xFF	; 255
    220e:	8b 83       	std	Y+3, r24	; 0x03
			CLCD_voidSendData(ptr[LOC_u8Iterator]);
    2210:	8c 81       	ldd	r24, Y+4	; 0x04
    2212:	28 2f       	mov	r18, r24
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	89 81       	ldd	r24, Y+1	; 0x01
    2218:	9a 81       	ldd	r25, Y+2	; 0x02
    221a:	fc 01       	movw	r30, r24
    221c:	e2 0f       	add	r30, r18
    221e:	f3 1f       	adc	r31, r19
    2220:	80 81       	ld	r24, Z
    2222:	0e 94 99 07 	call	0xf32	; 0xf32 <CLCD_voidSendData>
			CLCD_voidSetPosition(CLCD_ROW_2,LOC_u8col);
    2226:	82 e0       	ldi	r24, 0x02	; 2
    2228:	6b 81       	ldd	r22, Y+3	; 0x03
    222a:	0e 94 65 09 	call	0x12ca	; 0x12ca <CLCD_voidSetPosition>
			LOC_u8Iterator++;
    222e:	8c 81       	ldd	r24, Y+4	; 0x04
    2230:	8f 5f       	subi	r24, 0xFF	; 255
    2232:	8c 83       	std	Y+4, r24	; 0x04
			if(ptr[LOC_u8Iterator]== '/0')  break;
			CLCD_voidSendData(ptr[LOC_u8Iterator]);
    2234:	8c 81       	ldd	r24, Y+4	; 0x04
    2236:	28 2f       	mov	r18, r24
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	89 81       	ldd	r24, Y+1	; 0x01
    223c:	9a 81       	ldd	r25, Y+2	; 0x02
    223e:	fc 01       	movw	r30, r24
    2240:	e2 0f       	add	r30, r18
    2242:	f3 1f       	adc	r31, r19
    2244:	80 81       	ld	r24, Z
    2246:	0e 94 99 07 	call	0xf32	; 0xf32 <CLCD_voidSendData>
			LOC_u8col++;
    224a:	8b 81       	ldd	r24, Y+3	; 0x03
    224c:	8f 5f       	subi	r24, 0xFF	; 255
    224e:	8b 83       	std	Y+3, r24	; 0x03
			CLCD_voidSetPosition(CLCD_ROW_1,LOC_u8col);
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	6b 81       	ldd	r22, Y+3	; 0x03
    2254:	0e 94 65 09 	call	0x12ca	; 0x12ca <CLCD_voidSetPosition>
			LOC_u8Iterator++;
    2258:	8c 81       	ldd	r24, Y+4	; 0x04
    225a:	8f 5f       	subi	r24, 0xFF	; 255
    225c:	8c 83       	std	Y+4, r24	; 0x04
    225e:	d5 cf       	rjmp	.-86     	; 0x220a <main+0x1e>

00002260 <__prologue_saves__>:
    2260:	2f 92       	push	r2
    2262:	3f 92       	push	r3
    2264:	4f 92       	push	r4
    2266:	5f 92       	push	r5
    2268:	6f 92       	push	r6
    226a:	7f 92       	push	r7
    226c:	8f 92       	push	r8
    226e:	9f 92       	push	r9
    2270:	af 92       	push	r10
    2272:	bf 92       	push	r11
    2274:	cf 92       	push	r12
    2276:	df 92       	push	r13
    2278:	ef 92       	push	r14
    227a:	ff 92       	push	r15
    227c:	0f 93       	push	r16
    227e:	1f 93       	push	r17
    2280:	cf 93       	push	r28
    2282:	df 93       	push	r29
    2284:	cd b7       	in	r28, 0x3d	; 61
    2286:	de b7       	in	r29, 0x3e	; 62
    2288:	ca 1b       	sub	r28, r26
    228a:	db 0b       	sbc	r29, r27
    228c:	0f b6       	in	r0, 0x3f	; 63
    228e:	f8 94       	cli
    2290:	de bf       	out	0x3e, r29	; 62
    2292:	0f be       	out	0x3f, r0	; 63
    2294:	cd bf       	out	0x3d, r28	; 61
    2296:	09 94       	ijmp

00002298 <__epilogue_restores__>:
    2298:	2a 88       	ldd	r2, Y+18	; 0x12
    229a:	39 88       	ldd	r3, Y+17	; 0x11
    229c:	48 88       	ldd	r4, Y+16	; 0x10
    229e:	5f 84       	ldd	r5, Y+15	; 0x0f
    22a0:	6e 84       	ldd	r6, Y+14	; 0x0e
    22a2:	7d 84       	ldd	r7, Y+13	; 0x0d
    22a4:	8c 84       	ldd	r8, Y+12	; 0x0c
    22a6:	9b 84       	ldd	r9, Y+11	; 0x0b
    22a8:	aa 84       	ldd	r10, Y+10	; 0x0a
    22aa:	b9 84       	ldd	r11, Y+9	; 0x09
    22ac:	c8 84       	ldd	r12, Y+8	; 0x08
    22ae:	df 80       	ldd	r13, Y+7	; 0x07
    22b0:	ee 80       	ldd	r14, Y+6	; 0x06
    22b2:	fd 80       	ldd	r15, Y+5	; 0x05
    22b4:	0c 81       	ldd	r16, Y+4	; 0x04
    22b6:	1b 81       	ldd	r17, Y+3	; 0x03
    22b8:	aa 81       	ldd	r26, Y+2	; 0x02
    22ba:	b9 81       	ldd	r27, Y+1	; 0x01
    22bc:	ce 0f       	add	r28, r30
    22be:	d1 1d       	adc	r29, r1
    22c0:	0f b6       	in	r0, 0x3f	; 63
    22c2:	f8 94       	cli
    22c4:	de bf       	out	0x3e, r29	; 62
    22c6:	0f be       	out	0x3f, r0	; 63
    22c8:	cd bf       	out	0x3d, r28	; 61
    22ca:	ed 01       	movw	r28, r26
    22cc:	08 95       	ret

000022ce <_exit>:
    22ce:	f8 94       	cli

000022d0 <__stop_program>:
    22d0:	ff cf       	rjmp	.-2      	; 0x22d0 <__stop_program>
